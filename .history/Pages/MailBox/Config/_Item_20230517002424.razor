@inject IJSRuntime JSRuntime

<li class="is-flex is-align-items-center is-justify-content-space-between is-padding-10-y border-bottom">
    <div class="is-flex is-align-items-center is-gap-10-y">
        <span class="is_sub2 is-secondary-20">@category.name</span>
    </div>
     <div class="is-flex is-align-items-center is-gap-10-y">
            <span class="icon is-pointer is-primary-40" @onclick="() => ToggleEdit(true)">
                <i class="material-icons-outlined">edit</i>
            </span>
            <span class="icon is-pointer is-error-60" @onclick="() => ToggleConfirm(true)">
                <i class="material-icons-outlined">delete</i>
            </span>
    </div>
</li>
    <!-- Modal xác nhận việc xóa danh mục  -->
    <_ModalConfirmation
        nameModal="Xác nhận việc xóa danh mục"
        contentButton="Xóa"
        contentModal=@($"Thao tác này sẽ ảnh hưởng đến các thư nằm trong danh mục {category.name}, bạn có chắc chắn muốn xóa không?")
        isShowModal="isConfirm"
        OnToggleModal="ToggleConfirm"
        OnConfirmation="ConfirmDelete"
    />
    <!-- Modal xác nhận việc câp nhật danh mục  -->
    <_ModalData
        nameModal="Chỉnh sửa danh mục"
        contentButton="Cập nhật"
        isShowModal="isEdit"
        categoryName="@category.name"
        OnToggleModal="ToggleEdit"
        OnConfirmation="Update"
    />

@code{

    [Parameter] public CategoryModel category { get; set; }
    [Parameter] public EventCallback<CategoryModel> OnDelete {get; set; }
    [Parameter] public EventCallback<CategoryModel> OnUpdate {get; set; }
    public bool isConfirm = false;
    public bool isEdit = false;

    // Toggle hiển thị modal xác nhận xóa danh mục
    public void ToggleConfirm(bool isShow) 
    {
        isConfirm = isShow;
    }

    // Toggle hiển thị modal chỉnh sửa danh mục
    public void ToggleEdit(bool isShow)
    {
        isEdit = isShow;
    }

    // Xác nhận xóa danh mục
    public void ConfirmDelete()
    {
        OnDelete.InvokeAsync(category);
        isConfirm = !isConfirm;
    }

    // Update danh mục
    public async Task Update(string name)
    {
        // validate
        bool isValid = await IsValidCategory(name);
        if(!isValid)
        {
            return;
        }
        category.name = name; 
        await OnUpdate.InvokeAsync(category);
        isEdit = !isEdit;
    }

    // Validate tên danh mục
    public async Task<bool> IsValidCategory(string name)
    { 
        if(string.IsNullOrEmpty(name)) 
        {
            await JSRuntime.InvokeVoidAsync("tagline", false, "Vui lòng nhập tên danh mục!");
            return false;
        }

        if( name.Length >  30) 
        {
            await JSRuntime.InvokeVoidAsync("tagline", false, "Tên danh mục tối đa 30 ký tự!");
            return false;
        }
        return true;
    }
}