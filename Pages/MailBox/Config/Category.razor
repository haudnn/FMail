@inject IJSRuntime JSRuntime
@page "/config/mail"
@layout LayoutMain

<div class="is-padding-20">
    <div class="container-manager is-config">
        <div class="is-flex is-align-items-center">
            <p class="is-flex-1 is-uppercase is_h6 is-secondary-20">Cấu hình hộp thư</p>
            <div class="wrapper-button primary-btn" @onclick="() => Toggle(true)">
                <span class="icon">
                    <i class="material-icons-outlined has-text-white">add</i>
                </span>
                <span class="has-text-white is_button">Thêm danh mục</span>
            </div>
        </div>
        <p class="is-padding-20-x is_body1 is-secondary-20">Danh sách hạng mục</p>
        <ul>
            @foreach (var category in categories.Where(c => c.name != "Khác"))
            {
                <_Item category="category" OnDelete="Delete" OnUpdate="Update"/>
            }
        </ul>
        <li class="is-flex is-align-items-center is-justify-content-space-between is-padding-10-y border-bottom">
                <div class="is-flex is-align-items-center is-gap-10-y">
                    <span class="is_sub2 is-secondary-20">Khác</span>
                </div>
            </li>
    </div>
    <!-- Modal thêm danh mục  -->
    <_ModalData
        nameModal="Thêm danh mục"
        contentButton="Cập nhật"
        isShowModal="isShow"
        categoryName="@categoryName"
        OnToggleModal="Toggle"
        OnConfirmation="Add"
    />
</div>
@code{
    public List<CategoryModel> categories = new List<CategoryModel>();
    public bool isShow = false;
    public string categoryName = String.Empty;

    // Get list danh mục
    protected override async Task OnInitializedAsync()
    {   
        categories = await CategoryData.GetList();
    }

    // Bật tắt modal thêm danh mục
    public void Toggle(bool isShowAdd) 
    {
        isShow = isShowAdd;
    }


    // Xóa danh mục
    public async Task Delete(CategoryModel category)
    {
        await CategoryData.Delete(category);
        categories.Remove(categories.FirstOrDefault(x => x.id == category.id));
        StateHasChanged();
    }

    // Tạo mới danh mục
    public async Task Add(string name)
    {

        bool isValid = await IsValidCategory(name);
        if(!isValid) return;

        CategoryModel category = new CategoryModel
        { 
            id = GenerateIDHelper.GenerateID("19012001"),
            name = name,
        };
        await CategoryData.Create(category);

        categories.Add(category);
        categoryName = String.Empty;
        isShow = !isShow;
    }


    // Cập nhật danh mục
    public async Task Update(CategoryModel category) 
    {
        await CategoryData.Update(category);
        StateHasChanged();
    }


    // Validate tên danh mục
    public async Task<bool> IsValidCategory(string name)
    { 
        if(string.IsNullOrEmpty(name)) 
        {
            await JSRuntime.InvokeVoidAsync("alert", "Vui lòng nhập tên danh mục!");
            return false;
        }

        if( name.Length >  30) 
        {
            await JSRuntime.InvokeVoidAsync("alert", "Tên danh mục tối đa 30 ký tự!");
            return false;
        }
        return true;
    }

}