@inject IJSRuntime JSRuntime
@page "/config/mail"

@layout LayoutMail
<div class="is-padding-20">
    <div class="container-manager is-config">
        <div class="is-flex is-align-items-center">
            <p class="is-flex-1 is-uppercase is_h6 is-secondary-20">Cấu hình hộp thư</p>
            <div class="wrapper-button primary-btn" @onclick="() => HandleToggleShowModalAdd(true)">
                <span class="icon">
                    <i class="material-icons-outlined has-text-white">add</i>
                </span>
                <span class="has-text-white is_button">Thêm danh mục</span>
            </div>
        </div>
        <p class="is-padding-20-x is_body1 is-secondary-20">Danh sách hạng mục</p>
        <ul>
            @foreach (var category in categories)
            {
                <_Item  
                    category="category" 
                    HandleDeleteCategory="HandleDeleteCategory" 
                    HandleUpdateCategory="HandleUpdateCategory"
                />
            }

        </ul>
    </div>
    <_ModalData
        nameModal="Thêm danh mục"
        contentButton="Cập nhật"
        toggleActiveModal="@isShowModalAdd"
        HandleToggleActiveModal="HandleToggleShowModalAdd"
        categoryName="@categoryName"
        HandleConfirmation="HandleAddCategory"
    />
</div>
@code{
    public List<CategoryModel> categories = new List<CategoryModel>();

    public bool isShowModalAdd = false;
    public string categoryName = String.Empty;
    public void HandleToggleShowModalAdd(bool isShow) 
    {
        isShowModalAdd = isShow;
    }

    protected override async Task OnInitializedAsync()
    {   
        await getAllCategories();
    }

    public async Task HandleDeleteCategory(CategoryModel categoryDelete)
    {
        CategoryData categoryData = new CategoryData();
        await categoryData.DeleteCategory(categoryDelete);
        await getAllCategories();
        StateHasChanged();
    }


    private async Task getAllCategories() 
    {
        CategoryData categoryData = new CategoryData();
        categories = await categoryData.GetAllCategory();
        return;
    }

    public async Task HandleAddCategory(string nameToAdd)
    {
        bool isValid = await IsValidCategory(nameToAdd);
        if(!isValid) return;
        CategoryData categoryData = new CategoryData();
        CategoryModel categoryToCreate = new CategoryModel{ 
            id = GenerateIDHelper.GenerateID("19012001"),
            name = nameToAdd,
        };
        await categoryData.CreateCategory(categoryToCreate);
        categories.Add(categoryToCreate);
        categoryName = String.Empty;
        isShowModalAdd = !isShowModalAdd;
    }

    public async Task HandleUpdateCategory(CategoryModel categoryUpdate) 
    {
        CategoryData categoryData = new CategoryData();
        await categoryData.UpdateCategory(categoryUpdate);
        await getAllCategories();
        StateHasChanged();
    }

    public async Task<bool> IsValidCategory(string nameToAdd)
    { 
        if(nameToAdd == String.Empty) {
            await JSRuntime.InvokeVoidAsync("alert", "Vui lòng nhập tên danh mục!");
            return false;
        }
        if( nameToAdd.Length >  30) {
            await JSRuntime.InvokeVoidAsync("alert", "Tên danh mục tối đa 30 ký tự!");
            return false;
        }
        return true;
    }

}