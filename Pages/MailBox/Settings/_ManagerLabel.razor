@inject IJSRuntime JSRuntime

<div class="container-manager">
    <div class="is-mb-20">
        <span class="is-uppercase is_h6 is-secondary-10">Quản lí nhãn</span>
    </div>
    <div class="is-inline-flex is-align-items-center is-gap-4 is-mb-20">
        <div class="search-wrapper label-input">
            <input class="search-input label-input" @bind=@labelName type="text" placeholder="Nhập tiêu đề nhãn" style="min-height: 36px;">
        </div>
        <div class="color-picker container-square medium grey">
            <input type="color" id="color-picker-input" @bind=@labelColor @oninput="ChangeColor">
            <label for="color-picker-input" class="icon is-secondary-40 color-picker-icon">
                <i class="material-symbols-outlined">palette</i>
            </label>
        </div>
        @if(isEditLabel) 
        {
            <div class="wrapper-button primary-btn" style="display: inline-flex; min-height: 36px;" @onclick="AcceptUpdate">
                <span class="icon">
                    <i class="material-icons-outlined">done</i>
                </span>
                <span class="is_caption">Chấp nhận</span>
            </div>
            <div class="wrapper-button" style="display: inline-flex; min-height: 36px;" @onclick="CancelEdit">
                <span class="icon is-error-40">
                    <i class="material-icons-outlined">close</i>
                </span>
                <span class="is_sub2 is-error-40">Hủy</span>
            </div>
        }
        else
        { 
            <div class="wrapper-button primary-btn" style="display: inline-flex; min-height: 36px;" @onclick="Create">
                <span class="icon">
                    <i class="material-icons-outlined">done</i>
                </span>
                <span class="is_caption">Tạo nhãn</span>
            </div>
        }  
    </div>
    <div>
        <span class="is-secondary-60 is_caption is-italic">Chọn nhãn để chỉnh sửa</span>
        <ul class="is-flex is-align-items-center is-flex-wrap-wrap" style="margin-top: 5px; gap: 10px">
            @foreach (var label in labels)
            {
            <li class="is-flex is-align-items-center wrapper-label-item" style="background-color: @(label.color + "33")">
                <span class="is_caption" style="color: @label.color;">@label.name</span>
                <div class="is-flex is-align-items-center">
                    <span class="icon is-primary-40 is-pointer" @onclick="() => Update(label)">
                        <i class="material-symbols-outlined is-font-12" style="font-size: 12px;">edit</i>
                    </span>
                    <div class="container-square small error" @onclick="() => Delete(label)">
                        <span class="icon has-text-white">
                            <i class="material-icons-outlined">delete</i>
                        </span>
                    </div>
                </div>
            </li>
            }
        </ul>
    </div>
</div>

@code {
    [Parameter]
    public List<LabelModel> labels { get; set; }
    private string labelName { get; set; } = String.Empty;
    private string labelColor { get; set; } = String.Empty;
    private string labelId { get; set; } = String.Empty;
    private bool isEditLabel = false;
    [CascadingParameter]
    public LayoutMain Layout { get; set; }


    private void Update(LabelModel label) 
    { 
        labelId = label.id;
        labelName = label.name;
        labelColor = label.color;
        isEditLabel = true;
    }



    private async Task AcceptUpdate()
    {
        if(labelName == String.Empty) 
        {
            await JSRuntime.InvokeVoidAsync("alert", "Vui lòng nhập tên của nhãn!");
            return;
        }
        await LabelData.UpdateLabel(
            new LabelModel 
            {
                id = labelId,
                color = labelColor,
                name = labelName,
                author = Layout.User.id,
            });
        LabelModel labelToUpdate = labels.FirstOrDefault(label => label.id ==  labelId);
        if (labelToUpdate != null)
        {
            labelToUpdate.name = labelName;
            labelToUpdate.color = labelColor;
        }
        isEditLabel = false;
        labelId =  String.Empty;
        labelName = String.Empty;
        labelColor = String.Empty;
    }



    private async Task Delete(LabelModel label) 
    {
        await LabelData.DeleteLabel(label);
        LabelModel labelToDelete = labels.FirstOrDefault(l => l.id == label.id);
        labels.Remove(labelToDelete);
        StateHasChanged();
    }



    private void CancelEdit() 
    { 
        isEditLabel = false;
        labelName = String.Empty;
        labelColor = String.Empty;
        labelId = String.Empty;
    }



    private async Task Create() 
    {
        if( labelName == String.Empty ) 
        { 
            await JSRuntime.InvokeVoidAsync("alert", "Vui lòng nhập tên của nhãn!");
            return;
        }
        if(labelColor == String.Empty) 
        {
            labelColor = GenerateColorHelper.RandomColor();
        }
        LabelModel labelToCreate = new LabelModel{ 
            id = GenerateIDHelper.GenerateID("19012001"),
            name = labelName,
            color = labelColor,
            author = Layout.User.id
        };
        await LabelData.CreateLabel(labelToCreate);
        labels.Add(labelToCreate);
        labelName = String.Empty;
        labelColor = String.Empty;
        StateHasChanged();
    }



    private void ChangeColor(ChangeEventArgs e) 
    {
        labelColor = e.Value.ToString();
    }
}