@* all group *@
<div class="container-manager">
    @switch (nameCurrentAction)
    {
    case "static":
            <div class="is-flex is-align-items-center is-mb-20">
                <span class="is-flex-1 is-uppercase is_h6 is-secondary-10">Quản lí nhóm</span>
                <div class="wrapper-button primary-btn" style="display: inline-flex;" @onclick='() => HandleChangeCurrentAction("add")'>
                    <span class="icon">
                        <i class="material-icons-outlined">add</i>
                    </span>
                    <span class="is_caption">Thêm nhóm</span>
                </div>
            </div>
            <ul class="is-flex is-flex-direction-column">
                @foreach (var group in groups)
                {
                    <_GroupItem
                        id="@group.id"
                        name="@group.name"
                        membersCount="@group.members.Count"
                        HandleViewDetailGroup="HandleViewDetailGroup"
                        HandleConfirmationDeleteGroup="HandleConfirmationDeleteGroup"
                    />
                }
            </ul>
        break;
    case "detail":
            <div class="is-mb-20">
                <div class="is-flex is-align-items-center is-justify-content-space-between is-mb-20 ">
                    <div class="wrapper-button btn-outlined" @onclick='HandleBackStep'>
                        <span class="icon">
                            <i class="material-icons-outlined is-secondary-40">arrow_back_ios</i>
                        </span>
                        <span class="is_button is-secondary-40">Quay lại</span>
                    </div>
                    <_AddMember members="members" directionDropdown="is-right" HandleSelectedMember="HandleSelectedMember"/>   
                </div>
                <p class="is_sub2 is-secondary-40" style="margin-bottom: 5px;">Tên nhóm</p>
                @if(!isShowEditNameGroup) {
                    <div class="is-flex is-align-items-center is-gap-4 is-pointer">
                        <span class="is_sub2 is-secondary-20">Nhóm @groupSelected.name</span>
                        <span class="icon" @onclick="HandleToggleShowEditName">
                            <i class="material-icons-outlined is-primary-40">edit</i>
                        </span>
                    </div>
                }
                else { 
                    <div class="is-flex is-align-items-center">
                        <div class="input-container is-flex-1 is-flex is-align-items-center">
                            <span class="input-icon left is_body2 is-secondary-60">Nhóm</span>
                            <input class="input-zone is_body2 is-secondary-20" type="text" @bind="@groupName">
                        </div>
                        <div class="is-flex is-align-items-center">
                            <div class="wrapper-icon is-pointer" @onclick="HandleEditGroup">
                                <span class="icon">
                                    <i class="material-icons-outlined is-primary-40">done</i>
                                </span>
                            </div>
                            <div class="wrapper-icon is-pointer" @onclick="HandleToggleShowEditName">
                                <span class="icon">
                                    <i class="material-icons-outlined is-error-60">close</i>
                                </span>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div>
                <p class="is_sub2 is-secondary-40" style="margin-bottom: 5px;">Thành viên</p>
                <ul class="is-flex is-flex-direction-column">
                    @foreach (var member in groupSelected.members)
                    {
                        <_MemberItem 
                            member="member"
                            HandleDeleteMember="HandleDeleteMember"
                        />
                    }
                </ul>
            </div>
        break;
    case "add":
            <div>
                <div class="is-mb-20">
                    <div class="wrapper-button btn-outlined is-inline-flex" @onclick='HandleBackStep'>
                        <span class="icon">
                            <i class="material-icons-outlined is-secondary-40">arrow_back_ios</i>
                        </span>
                        <span class="is_button is-secondary-40">Quay lại</span>
                    </div>
                </div>
                <div class="is-mb-20">
                    <p class="is_sub2 is-secondary-40" style="margin-bottom: 5px;">Tên nhóm</p>
                    <div class="input-container is-flex-1 is-flex is-align-items-center">
                        <span class="input-icon left is_body2 is-secondary-60">Nhóm</span>
                        <input class="input-zone is_body2 is-secondary-20" type="text" placeholder="Nhập tên nhóm" @bind="@groupName">
                        <span class="input-icon right">
                            <i class="material-icons-outlined is-secondary-40">edit</i>
                        </span>
                    </div>
                </div>
                <div class="is-mb-20">
                    <p class="is_sub2 is-secondary-40" style="margin-bottom: 5px;">Thành viên</p>
                    <ul class="is-flex is-flex-direction-column" style="margin-bottom: 5px;">
                        @foreach (var member in membersSelected)
                            {
                                <_MemberItem 
                                    member="member"
                                    HandleDeleteMember="HandleDeleteMember"
                                />
                            }
                    </ul>
                    <div style="margin-left: -7px;">
                        <_AddMember members="members" directionDropdown="is-left" HandleSelectedMember="HandleSelectedMember"/>   
                    </div>
                </div>
                <div class="is-flex is-align-items-center is-justify-content-flex-end is-gap-10-y">
                    <p class="is_caption is-error-60 is-pointer" @onclick='HandleBackStep'>Hủy</p>
                    <div class="wrapper-button primary-btn" @onclick="HandleCreateGroup">
                        <span class="icon">
                            <i class="material-icons-outlined">done</i>
                        </span>
                        <span class="is_caption">Cập nhật</span>
                    </div>
                </div>
            </div>
        break;
    default:
        break;
    }
</div>
@code {

    private string groupName = String.Empty;
    private bool toggleActiveAddMember = false;

    private bool isShowEditNameGroup = false;

    public string nameCurrentAction = "static";

    public GroupModel groupSelected;

    private List<GroupModel> groups = new List<GroupModel>();
        
    private List<MemberModel> members = new List<MemberModel>();

    private List<MemberModel> membersSelected = new List<MemberModel>();

    protected override void OnInitialized()
    {
        groups = InitDataFakeHelper.InitGroups();
        members = InitDataFakeHelper.InitMembers();
    }

    private void ToggleActiveAddMember(bool isActiveAddMember)
    {
        toggleActiveAddMember = isActiveAddMember;
    }


    private void HandleToggleShowEditName() { 
        isShowEditNameGroup = !isShowEditNameGroup;
        groupName = groupSelected.name;
    }

    private void HandleViewDetailGroup(string groupId) { 
        GroupModel findGroup = groups.FirstOrDefault(group => group.id == groupId);
        if (findGroup  != null)
        {
            groupSelected = findGroup;
            HandleChangeCurrentAction("detail");
        }
    }

    private void HandleChangeCurrentAction(string nameActionChange)
    {
        nameCurrentAction = nameActionChange;
        StateHasChanged();
    }

    private void HandleConfirmationDeleteGroup(string groupId){
        GroupModel groupToDelete = groups.FirstOrDefault(group => group.id == groupId);
        if (groupToDelete != null)
        {
            groups.Remove(groupToDelete);
        }
        StateHasChanged();
    }

    private void HandleSelectedMember(List<MemberModel> membersList) { 
        List<MemberModel> clonedList = new List<MemberModel>(membersSelected);
        clonedList.AddRange(membersList);
        membersSelected = clonedList;
        if(groupSelected != null) {
            groupSelected.members.AddRange(membersList);
        }
        
    }
    
    private void HandleCreateGroup() {
        GroupModel groupToCreate = new GroupModel{ 
            id = "999",
            name= groupName,
            members = membersSelected
        };
        groups.Add(groupToCreate);
        groupName = String.Empty;
        membersSelected = new List<MemberModel>();
        HandleChangeCurrentAction("static");
    }

    private void HandleBackStep() {
        isShowEditNameGroup = false;
        groupSelected = null;
        groupName = String.Empty;
        membersSelected = new List<MemberModel>();
        HandleChangeCurrentAction("static");
    }

    private void HandleDeleteMember(MemberModel member){
        // Flow: when user selected group => groupSelected => query id group => find members id => remove
        // get group id
        @* MemberModel memberToRemove = groupSelected.members.Find(member => member.id == memberIdToRemove);
        if (memberToRemove != null)
        {
            groupSelected.members.Remove(memberToRemove);
        } *@
        if(groupSelected != null) {
            groupSelected.members.Remove(member);
        }
        else {
            membersSelected.Remove(member);
        }
        members.Add(member);
    }

    private void HandleEditGroup() {
        @* get group id from group selected => update by id *@
        groupSelected.name = groupName;
        isShowEditNameGroup = false;
    }
}