<div class="poll__content" style="margin: 0; border-top-left-radius: 0;">
    <ul class="is-flex is-flex-direction-column" style="gap: 20px 0">
        @foreach ( var question in questions)
        {
            var memberUnvote = GetMembersUnvote(question, membersReceived);
        <li>
            <div class="is-flex is-align-items-center is-gap-8">
                <span class="is_sub2">1.</span>
                <p class="is_sub2 is-secondary-20">@question.text</p>
            </div>
            <div class="is-mt-10">
                <div class="dropdown is-right @(toggleViewUnvote.IsToggled && idToogleUnvote == question.id ? "is-active" : "" )">
                    <div class="dropdown-trigger" @onclick="() => HandleToggleViewUnvote(question.id)">   
                        <div class="is-flex is-align-items-center">
                            <span class="is_body2 is-secondary-40">Số người chưa thực hiện khảo sát:
                                <span class="is_sub2 is-secondary-20">@memberUnvote.Count()</span>
                            </span>
                            <span class="icon">
                                <i class="material-icons-outlined is-secondary-20">arrow_drop_down</i>
                            </span>
                        </div>
                    </div>
                    <div class="dropdown-menu" style="min-width: 90%;">
                        <_DropdownPoll memberIds="memberUnvote"/>
                    </div>
                </div>
                <ul class="is-flex is-flex-direction-column is-gap-10-x" style="padding: 10px 20px 0px 20px;">
                    @foreach (var item in question.choices)
                    {
                        var valueProgress = Math.Floor(SharedHelper.Progress(item.voters.Count(), totalMembers));
                        <li class="is-flex is-align-items-center is-justify-content-space-between">
                            <span class="is_body2 is-secondary-20 is-flex-1">@item.text</span>
                            <div class="is-flex is-align-items-center is-flex-1 is-justify-content-flex-end">
                                <div class="progress_has_value is-justify-content-flex-end is-gap-10-y">
                                    <div class="dropdown is-right @(toggleViewVote.IsToggled && idToogleVote == item.id ? "is-active" : "" )">
                                        <div class="dropdown-trigger" @onclick="() => HandleToggleViewVote(item.id)">
                                        <div class="is-flex is-align-items-center is-justify-content-flex-start" style="width: 140px;">
                                                <span class="is_sub2 is-secondary-40 is-flex-1">@item.voters.Count() lượt bình chọn</span>
                                                <span class="icon is-small">
                                                    <i class="material-icons-outlined is-secondary-40">arrow_drop_down</i>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="dropdown-menu" style="min-width: 250px;">
                                            <_DropdownPoll memberIds="item.voters"/>
                                        </div>
                                    </div>
                                    <progress class="progress is-small @SharedHelper.ProgressColor(valueProgress)" style="max-width: 180px;"
                                        value="@valueProgress" 
                                        max="100"
                                        >
                                    </progress>
                                    <span style="min-width: 40px;" 
                                    class="has-text-right is_sub2 @SharedHelper.ProgressColor(item.voters.Count())">@valueProgress%</span>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </li>
        }
    </ul>
</div>

@code{

    [Parameter] public string author { get; set; }
    [Parameter] public MailModel mail {get; set;} = new MailModel();
    [Parameter] public List<QuestionModel> questions { get; set; } = new();
    private ToggleHelper toggleViewVote = new ToggleHelper();
    private ToggleHelper toggleViewUnvote = new ToggleHelper();
    private string idToogleUnvote = String.Empty;
    private string idToogleVote = String.Empty;
    private int totalMembers = 0;
    private List<string> membersReceived { get; set; } = new();

    private void HandleToggleViewVote(string idChoice)
    { 
        idToogleVote = idChoice; 
        toggleViewVote.Toggle();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            membersReceived = mail.to.Concat(mail.cc).Concat(mail.bcc).Distinct().ToList();
            membersReceived.Add(author);
            totalMembers = membersReceived.Count();
            StateHasChanged();
        }
    }

    private void HandleToggleViewUnvote(string idQuestion)
    {
        idToogleUnvote = idQuestion;
        toggleViewUnvote.Toggle();
    }

    // Hàm kiểm tra những người chưa vote
    // Lấy tất cả người đã vote và tất cả những ngươi nhận thư => người chưa vote
    public static List<string> GetMembersUnvote(QuestionModel question, List<string>  membersReceived)   
    {
        var allVoters = question.choices.SelectMany(c => c.voters).ToList();
        var unvotedMembers = membersReceived.Where(m => !allVoters.Contains(m)).ToList();
        return unvotedMembers;
    }
}

