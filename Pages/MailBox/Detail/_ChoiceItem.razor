<div class="is-flex is-align-items-center is-gap-4">
    @if(question.isMultipleChoice) 
    {
        <label class="is-pointer" for="@choice.text" @onclick="() => Vote(choice.id)">
            <input disabled="@isStopped" class="is-pointer" checked="@isVotePrevious" id="@choice.text" type="checkbox" name="checkbox" />
        </label>

    }
    else
    { 
        <label class="is-pointer" for="@choice.text" @onclick="() => Vote(choice.id)">
            <input disabled="@isStopped" class="is-pointer" checked="@isVotePrevious" id="@choice.text" type="radio" name="radio"/>
        </label>
    }
    @choice.text
</div>

@code {
    [CascadingParameter] public LayoutMain Layout { get; set;}
    [Parameter] public ChoiceModel choice { get; set;}
    [Parameter] public EventCallback<QuestionChoice> OnVote { get; set; }
    [Parameter] public QuestionModel question { get; set; }
    [Parameter] public bool isStopped { get; set; }
    public bool isVotePrevious { get; set; }


    protected override void OnInitialized()
    {
        isVotePrevious = choice.voters.Any(v => v == Layout.User.id);
    }

    public void Vote(string id) 
    {

        OnVote.InvokeAsync(
            new QuestionChoice 
            {
                id = question.id,
                choiceId = id,
                isMultipleChoice = question.isMultipleChoice,
            }
        );
    }

}

