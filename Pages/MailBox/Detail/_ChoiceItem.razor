<div class="is-flex is-align-items-center is-gap-4">
    @if(isMultipleChoice) 
    {
        <label class="is-pointer" for="@choice.text" @onclick="() => Vote(choice.id)">
            <input disabled="@isStopped" class="is-pointer" checked="@isVotePrevious" id="@choice.text" type="checkbox" name="checkbox"/>
        </label>

    }
    else
    { 
        <label class="is-pointer" for="@choice.text" @onclick="() => Vote(choice.id)">
            @* <span name="choice" class="icon is-small is-secondary-60 is-pointer" @onclick="() => Vote(choice.id)">
                <i class="material-icons-sharp">@(idChoice == choice.id || isVotePrevious  ? "radio_button_checked" : "radio_button_unchecked")</i>
            </span>  *@
            <input disabled="@isStopped" class="is-pointer" checked="@isVotePrevious" id="@choice.text" type="radio" name="radio"/>
        </label>


    }
    @choice.text
</div>

@code {
    [CascadingParameter]
    public LayoutMain Layout { get; set;}
    [Parameter] public ChoiceModel choice { get; set;}
    [Parameter] public bool isMultipleChoice  { get; set;}
    [Parameter] public string idChoice { get; set;}
    [Parameter] public EventCallback<QuestionChoice> OnVote { get; set; }
    [Parameter] public string questionId { get; set; }
    [Parameter] public EventCallback<string> IsVotePrevious { get; set; }
    [Parameter] public bool isStopped { get; set; }
    public bool isVotePrevious { get; set; }

    public void Vote(string id) 
    {
        if(id == idChoice) 
        { 
            return;
        }
        OnVote.InvokeAsync(
            new QuestionChoice 
            {
                id = questionId,
                choiceId = id,
                isVotePrevious = isVotePrevious,
                isMultipleChoice = isMultipleChoice,
            }
        );
    }

    public void SubscribeToMessage()
    {
        MessagingCenter.Subscribe<string>(this, "vote", (sender) => 
        {
            idChoice = sender;
            StateHasChanged();
        });
    }

    protected override async Task OnInitializedAsync()
    {
        isVotePrevious = choice.voters.Any(v => v == Layout.User.id);
        if(isVotePrevious) {
            await IsVotePrevious.InvokeAsync(choice.id);
        }
        @* SubscribeToMessage(); *@
    }

}

