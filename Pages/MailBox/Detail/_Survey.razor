<div class="poll__content" style="margin: 0; border-top-left-radius: 0;">
    <ul class="is-flex is-flex-direction-column" style="gap: 20px 0">
        @{
            var index = 1;
        }
        @foreach (var question in poll.questions)
        {
            <li>
                <div class="is-flex is-align-items-center is-gap-8">
                    <span class="is_sub2">@index.</span>
                    <p class="is_sub2 is-secondary-20">@question.text</p>
                </div>
                <div class="control is-mt-10 is-flex is-flex-direction-column is-gap-10-x">
                    @foreach (var choice in question.choices)
                    {
                        <_ChoiceiItem
                            choice="choice"
                            questionid="@question.id"
                            isMultipleChoice="@question.isMultipleChoice"
                            idChoice="@idChoice"
                            IsVotePrevious="IsVotePrevious"
                            OnVote="Vote"
                        />
                    }
                </div>
            </li>
            index++;
        }
    </ul>
</div>
@code{
    [CascadingParameter]
    public LayoutMain Layout { get; set; }

    [Parameter] 
    public PollModel poll { get; set; } = new PollModel();
    public string idChoice { get; set; } = String.Empty;

    public void IsVotePrevious(string id) {
        idChoice = id;
    }

    public async Task Vote(QuestionChoice question)
    {
        MemberModel member = new MemberModel
            {
                id = Layout.User.id,
                avatar = Layout.User.avatar,
                email = Layout.User.email,
                name = Layout.User.FullName
            };
        if(!question.isMultipleChoice) {
            if (!question.isVotePrevious)
            {
                if (!String.IsNullOrEmpty(idChoice))
                {
                    await PollData.UnVote(poll.id, question.id, idChoice, member);
                }
                idChoice = question.choiceId;
                await PollData.Vote(poll.id, question.id, idChoice, member);
                @* MessagingCenter.Send<string>(idChoice,"vote"); *@
            }
        }
        else 
        { 
            idChoice = question.choiceId;
            if(question.isVotePrevious) 
            {
                await PollData.UnVote(poll.id, question.id, idChoice, member); 
            }
            else
            { 
                await PollData.Vote(poll.id, question.id, idChoice, member);
            }    
        }

    }
}