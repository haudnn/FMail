@page "/inbox/{id}"
@layout LayoutMain
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@using Microsoft.AspNetCore.Components
@using System.IO
@inject IJSRuntime JSRuntime

<section class="is-padding-20">
    <_Header
        isImportant="@mail.isImportant"
        isRead="@mail.isRead"
        labels="labels"
        labelsSelected="labelsSelected"
    />

    <main class="is-padding-top-20">
        <p class="is-secondary-20 is_h6">@mail.subject</p>
        <div class="is-padding-top-20">
            <_MailActionsBar
                author="author"
                sentDate="@sentDateFormat"
                to="membersTo"
                SetCurrentAction="SetCurrentAction"
            />
        </div>
        <div class="is-padding-top-20" style="margin-left: 40px;">
            <div style="padding-bottom: 20px">
                <BlazoredTextEditor Placeholder="" ReadOnly>
                     <EditorContent>
                        @((MarkupString)QuillHTMLContentBody)
                    </EditorContent>
                </BlazoredTextEditor>
            </div>
            @if(mail.pollId != null)
            {
                <div class="is-padding-top-20">
                        @if (isStopSurvey)
                        {
                            <div class="is-flex is-align-items-center is-gap-4" style="margin-bottom: 10px;">
                                <span class="icon is-small">
                                    <i class="material-icons-outlined is-error-40">info</i>
                                </span>
                                <span class="is_sub2 is-error-40">Hiện tại đã dừng khảo sát. Vậy nên bạn chỉ có thể xem thống kê.</span>
                            </div>
                        }
                    <div class="is-flex is-align-items-center" style="gap: 0 20px">
                        <p class="is-flex-1  is-secondary-10 is_typhography @(isStopSurvey ? "stop-survey" : "" )">
                            @poll.title
                        </p>
                        <div class="is-flex is-align-items-center" style="gap: 0 20px">
                            <div class="is-flex is-align-items-center @(isStopSurvey ? "stop-survey" : "" )">
                                <span class="icon is-secondary-40 is_body2">
                                    <i class="material-icons-outlined">info</i>
                                </span>
                                <span class="is_body2 is-secondary-40">Thời gian kết thúc khảo sát: </span>
                            </div>
                            <div class="is-flex is-align-items-center is-gap-4">
                                <div class="is-flex is-align-items-center @(isStopSurvey ? " stop-survey" : "" )">
                                    <span class="icon">
                                        <i class="material-icons-outlined is-secondary-10">calendar_today</i>
                                    </span>
                                    <span class="is_caption is-black">@poll.endDate</span>
                                </div>
                                <div class="is-flex is-align-items-center @(isStopSurvey ? " stop-survey" : "" )">
                                    <span class="icon">
                                        <i class="material-icons-outlined is-secondary-10">schedule</i>
                                    </span>
                                    <span class="is_caption is-black">@poll.endTime</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="is-padding-top-20">
                        <div class="is-flex is-align-items-center is-gap-4">
                            <button disabled="@isStopSurvey" class="wrapper-header-poll @(isStopSurvey ? " stop-survey" : ""
                                    ) @(!toggleViewStatistical.IsToggled ? "active" : "" ) is-pointer"
                                    @onclick="HandleToggleViewStatistical">
                                <span class="is_sub2">Khảo sát</span>
                            </button>
                            @if(mail.author == Layout.User.id) { 
                                <button 
                                        disabled="@isStopSurvey"
                                        class="wrapper-header-poll @(toggleViewStatistical.IsToggled ? " active" : "" ) is-pointer"
                                        @onclick="HandleToggleViewStatistical">
                                        <span class="is_sub2">Thống kê</span>
                                </button>
                            }

                        </div>
                            @if (!toggleViewStatistical.IsToggled)
                            {
                                <_Survey questions="questions" />
                            }
                            else
                            {  
                                <_Statistical questions="questions"/>
                            }
                    </div>
                </div>
                @if(mail.author == Layout.User.id) 
                {
                    <div class="is-padding-top-20">
                        <button disabled="@isStopSurvey" style="border: none;"
                            class="wrapper-button error-btn @(isStopSurvey ? " disable" : "" ) is-inline-flex"
                            @onclick="() => HandleToggleActiveModal(true)">
                            <span class="icon">
                                <i class="material-icons-outlined has-text-white">poll</i>
                            </span>
                            <span class="is_caption has-text-white">Dừng khảo sát</span>
                        </button>
                    </div>
                    <_ModalConfirmation 
                        nameModal="Xác nhận việc dừng khảo sát" 
                        toggleActiveModal="toggleActiveModal"
                        contentButton="Dừng khảo sát"
                        contentModal="Khi thực hiện thao tác này, người dùng sẽ không thể thực hiện khảo sát được nữa và bạn sẽ không thể mở lại cuộc khảo sát này . Bạn có chắc chắn muốn tiếp tục không?"
                        HandleToggleActiveModal="HandleToggleActiveModal" 
                        HandleConfirmation="HandleStopSurvey" 
                    />
                }
            }
            @if(attachments.Count > 0)
            { 
                <div style="padding: 40px 0px 20px 0px">
                    <ul class="attachments-list mt-0">
                        @foreach (var attachment in attachments)
                        {
                            <li class="attachment-item" @onclick="() => DownloadFileFromStream(attachment)">
                                <img style="width: 16px; height: 16px;" src="@string.Concat("images/", attachment.icon, ".png")">
                                <span>@attachment.name</span>
                            </li>
                        }
                    </ul>
                </div>
            }
            <div  class="is_sub2 is-secondary-10 is-padding-20-x">
               @((MarkupString)QuillHTMLContentSignature)
            </div>
            <div class="is-flex is-align-items-center is-gap-10-y ">
                <div class="wrapper-button btn-outlined">
                    <span class="icon">
                        <i class="material-icons-outlined is-secondary-40">reply</i>
                    </span>
                    <span class="is_caption is-secondary-40">Trả lời</span>
                </div>
                <div class="wrapper-button btn-outlined">
                    <span class="icon">
                        <i class="material-icons-outlined is-secondary-40">reply_all</i>
                    </span>
                    <span class="is_caption is-secondary-40">Trả lời tất cả</span>
                </div>
                <div class="wrapper-button btn-outlined">
                    <span class="icon">
                        <i class="material-icons-outlined is-secondary-40">forward</i>
                    </span>
                    <span class="is_caption is-secondary-40">Chuyển tiếp</span>
                </div>
            </div>
        </div>
        <div>
            <ul>
                
            </ul>
        </div>
        <div style="margin-left: 45px;">
            @switch (currentAction)
            {
                case "reply":
                    <_MailAction
                        iconName="reply"
                        displayName="Đặng Ngọc Hậu"
                        isShowTextTo=@false
                        actionName="Trả lời"
                    />
                    break;
                case "reply_all":
                    <_MailAction
                        iconName="reply_all"
                        displayName="Đặng Ngọc Hậu"
                        isShowTextTo=@false
                        actionName="Trả lời tất cả"
                    />
                    break;
                case "forward":
                    <_MailAction
                        iconName="forward"
                        displayName="Đặng Ngọc Hậu"
                        isShowTextTo=@true
                        actionName="Chuyển tiếp"
                    />
                    break;
                default:
                    break;
            }   
        </div>
    </main>

</section>
@code {
    [CascadingParameter]
    public LayoutMain Layout { get; set; }
    [Parameter]
    public string? id { get; set; }
    BlazoredTextEditor QuillHtml;
    string QuillHTMLContentBody;
    string QuillHTMLContentSignature;
    public string currentAction = String.Empty;
    public bool toggleActiveModal = false;
    private ToggleHelper toggleViewExpand = new ToggleHelper();
    public MailModel mail = new MailModel();
    public List<MemberModel> membersTo = new List<MemberModel>();
    public List<AttachmentModel> attachments = new List<AttachmentModel>();
    public PollModel poll = new();
    public List<QuestionModel> questions = new();
    public List<LabelModel> labels = new List<LabelModel>();
    public List<LabelModel> labelsSelected  = new List<LabelModel>();
    public bool isStopSurvey = false;
    public UserModel author  = new();
    public string sentDateFormat;
    private ToggleHelper toggleViewStatistical = new ToggleHelper();
    private ToggleHelper toggleViewCC = new ToggleHelper();

    private ToggleHelper toggleViewButtonAnother = new ToggleHelper();

    protected override async Task OnParametersSetAsync()
    {
        mail = await MailData.GetMailById(id);
        if(mail.pollId != null) { 
            poll = await PollData.GetPollById(mail.pollId);
            questions= poll.questions;
        }
        author = await UserData.Get(mail.author);
        labelsSelected  = await LabelData.FindLabelsByIds(mail.labels);
        labels = await LabelData.GetAllLabels();
        attachments = mail.attachments;
        sentDateFormat = DateTimeHelper.FormatDateTimeDetailView(mail.sentDate);
        membersTo = mail.to;
        QuillHTMLContentBody = mail.body;
        QuillHTMLContentSignature = mail.signature.body;
    }
    


    private void HandleToggleViewStatistical()
    {
        toggleViewStatistical.Toggle();
    }

    private void HandleToogleViewExpand()
    {
        toggleViewExpand.Toggle();
    }

    private void HandleToggleButtonAnother()
    {
        toggleViewButtonAnother.Toggle();
    }

    private void HandleToggleViewCC()
    {
        toggleViewCC.Toggle();
    }

    private void HandleToggleActiveModal(bool isActiveModal)
    {
        toggleActiveModal = isActiveModal;
    }

    private void HandleStopSurvey()
    {
        toggleActiveModal = false;
        toggleViewStatistical.Toggle();
        isStopSurvey = true;
    }


    public void SetCurrentAction(string actionName)
    {
        currentAction = actionName;
    }

    private async Task DownloadFileFromStream(AttachmentModel attachment)
    {
        var fileName = attachment.name;
        var fileURL = "https://localhost:2023" + attachment.filePath;
        await JSRuntime.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);
    }
    
}
