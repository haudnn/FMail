@page "/inbox/{id}"
@layout LayoutMain
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@using Microsoft.AspNetCore.Components
@using System.IO
@inject IJSRuntime JSRuntime

<section class="is-padding-20">
    <_Header mail="mail" />

    <main class="is-padding-top-20">
        <p class="is-secondary-20 is_h6">@mail.subject</p>
        <div class="is-padding-top-20">
            <_Info
                mail="mail"
                author="author"
                SetCurrentAction="SetCurrentAction"
            />
        </div>
        <div class="is-padding-top-20">
            <div style="padding-bottom: 20px; margin-left: 40px;" >
                @((MarkupString)mail.body)
            </div>
            @if(!string.IsNullOrEmpty(mail.pollId))
            {
                <div class="is-padding-top-20" style="margin-left: 40px;">
                        @if (poll.isStopped)
                        {
                            <div class="is-flex is-align-items-center is-gap-4" style="margin-bottom: 10px;">
                                <span class="icon is-small">
                                    <i class="material-icons-outlined is-error-40">info</i>
                                </span>
                                <span class="is_sub2 is-error-40">Khảo sát này đã được dừng hoặc hết thời gian.</span>
                            </div>
                        }
                    <div class="is-flex is-align-items-center" style="gap: 0 20px">
                        <p class="is-flex-1 is-secondary-10 is_typhography @(isStopSurvey ? "stop-survey" : "" )">
                            @poll.title
                        </p>
                        <div class="is-flex is-align-items-center" style="gap: 0 20px">
                            <div class="is-flex is-align-items-center @(isStopSurvey ? "stop-survey" : "" )">
                                <span class="icon is-secondary-40 is_body2">
                                    <i class="material-icons-outlined">info</i>
                                </span>
                                <span class="is_body2 is-secondary-40">Thời gian kết thúc khảo sát: </span>
                            </div>
                            <div class="is-flex is-align-items-center is-gap-4">
                                <div class="is-flex is-align-items-center @(isStopSurvey ? "stop-survey" : "" )">
                                    <span class="icon">
                                        <i class="material-icons-outlined is-secondary-10">calendar_today</i>
                                    </span>
                                    <span class="is_caption is-black">@poll.endDate</span>
                                </div>
                                <div class="is-flex is-align-items-center @(isStopSurvey ? "stop-survey" : "" )">
                                    <span class="icon">
                                        <i class="material-icons-outlined is-secondary-10">schedule</i>
                                    </span>
                                    <span class="is_caption is-black">@poll.endTime</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="is-padding-top-20">
                        <div class="is-flex is-align-items-center is-gap-4">
                            <button 
                                disabled="@(poll.author == Layout.User.id ? false : isStopSurvey)"
                                class="wrapper-header-poll @(isStopSurvey ? "stop-survey" : "" ) @(currentType == 0 ? "active" : "" ) is-pointer"
                                @onclick="() => HandleToggleViewStatistical(0)"
                            >
                                <span class="is_sub2">Khảo sát</span>
                            </button>
                            @if(poll.author == Layout.User.id) { 
                                <button 
                                        disabled="@(poll.author == Layout.User.id ? false : isStopSurvey)"
                                        class="wrapper-header-poll @(currentType == 1 ? "active" : "" ) is-pointer"
                                        @onclick="() => HandleToggleViewStatistical(1)">
                                        <span class="is_sub2">Thống kê</span>
                                </button>
                            }

                        </div>
                            @if (currentType == 0)
                            {
                                <_Survey isStopped="@isStopSurvey" poll="poll"  questions="questions"/>
                            }
                            else
                            {  
                                <_Statistical author="@poll.author" mail="mail" questions="questions"/>
                            }
                    </div>
                </div>
                @if(poll.author == Layout.User.id) 
                {
                    <div class="is-padding-top-20" style="margin-left: 40px;">
                        <button disabled="@isStopSurvey" style="border: none;"
                            class="wrapper-button error-btn @(isStopSurvey ? " disable" : "" ) is-inline-flex"
                            @onclick="() => HandleToggleActiveModal(true)">
                            <span class="icon">
                                <i class="material-icons-outlined has-text-white">poll</i>
                            </span>
                            <span class="is_caption has-text-white">Dừng khảo sát</span>
                        </button>
                    </div>
                    <_ModalConfirmation 
                        nameModal="Xác nhận việc dừng khảo sát" 
                        toggleActiveModal="toggleActiveModal"
                        contentButton="Dừng khảo sát"
                        contentModal="Khi thực hiện thao tác này, người dùng sẽ không thể thực hiện khảo sát được nữa và bạn sẽ không thể mở lại cuộc khảo sát này. Bạn có chắc chắn muốn tiếp tục không?"
                        HandleToggleActiveModal="HandleToggleActiveModal" 
                        HandleConfirmation="HandleStopSurvey" 
                    />
                }
            }
            @if(attachments.Count > 0)
            { 
                <div style="padding: 40px 0px 20px 0px; margin-left: 40px;" >
                    <ul class="attachments-list mt-0">
                        @foreach (var attachment in attachments)
                        {
                            <li class="attachment-item" @onclick="() => DownloadFileFromStream(attachment)">
                                <img style="width: 16px; height: 16px;" src="@string.Concat("images/", attachment.icon, ".png")">
                                <span>@attachment.name</span>
                            </li>
                        }
                    </ul>
                </div>
            }
            <div class="is_sub2 is-secondary-10 is-padding-20-x" style="margin-left: 40px;">
                @((MarkupString)mail.signature?.body)
            </div>
            <ul>
               @foreach (var item in mails)
               {
                    <_ReplyItem SetCurrentAction="SetCurrentAction" mail="item"/>
               }
            </ul>
        </div>
        @switch (currentAction)
            {
                case "reply":
                    <_ActionItem
                        iconName="reply"
                        isShowTextTo=false
                        actionName="Trả lời"
                        SetCurrentAction="SetCurrentAction"
                        HandleCreate="HandleCreate"
                        mail="@currentModelAction.action"
                        toList="toList"
                    />
                    break;
                case "reply_all":
                    <_ActionItem
                        iconName="reply_all"
                        isShowTextTo=false
                        actionName="Trả lời tất cả"
                        SetCurrentAction="SetCurrentAction"
                        HandleCreate="HandleCreate"
                        mail="@currentModelAction.action"
                        toList="toList"
                    />
                    break;
                case "forward":
                    <_ActionItem
                        iconName="forward"
                        isShowTextTo=true
                        actionName="Chuyển tiếp"
                        SetCurrentAction="SetCurrentAction"
                        HandleCreate="HandleCreate"
                        mail="@currentModelAction.action"
                        toList="toList"
                    />
                    break;
                default:
                    break;
            }  
    </main>

</section>
@code {
    [CascadingParameter]
    public LayoutMain Layout { get; set; }
    [Parameter]
    public string id { get; set; }
    public string currentAction = String.Empty;
    public bool toggleActiveModal = false;
    public MailModel mail { get; set; } = new MailModel();
    public List<AttachmentModel> attachments = new List<AttachmentModel>();
    public PollModel poll = new();
    public List<QuestionModel> questions = new();
    public List<LabelModel> labels = new List<LabelModel>();
    public List<LabelModel> labelsSelected  = new List<LabelModel>();
    public bool isStopSurvey;
    public UserModel author  = new();
    private ToggleHelper toggleViewStatistical = new ToggleHelper();
    public ActionModel currentModelAction = new ActionModel();
    public List<MailModel> mails = new List<MailModel>();

    public List<string> toList = new List<string>();
    public int currentType = 0;
    protected override async Task OnParametersSetAsync()
    {
        mail = await MailData.GetMailById(id);
        mails = await MailData.GetMailThread(mail.originalMailId != "" ? mail.originalMailId : id, Layout.User.id);
        await MailData.Read(id, true);
        if(!string.IsNullOrEmpty(mail.pollId)) 
        { 
            poll = await PollData.GetPollById(mail.pollId);
            questions= poll.questions;
            isStopSurvey = poll.isStopped;
        }

        author = await UserData.Get(mail.from);
        labelsSelected  = await LabelData.FindLabelsByIds(mail.labels);
        labels = await LabelData.GetAllLabels(Layout.User.id);
        attachments = mail.attachments;
        StateHasChanged();

    }



    private void HandleToggleViewStatistical(int type)
    {
       currentType = type;
    }

    private void HandleToggleActiveModal(bool isActiveModal)
    {
        toggleActiveModal = isActiveModal;
    }

    private async Task HandleStopSurvey()
    {
        await PollData.Stop(poll.id);
        toggleActiveModal = false;
        HandleToggleViewStatistical(0);
        isStopSurvey = true;
    }


    public void SetCurrentAction(ActionModel action)
    {
        currentAction = action.action;
        currentModelAction = action;
        AddListReceiver(action);
        StateHasChanged();

    }


    private async Task DownloadFileFromStream(AttachmentModel attachment)
    {
        var fileName = attachment.name;
        var fileURL = "https://localhost:2023" + attachment.filePath;
        await JSRuntime.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);
    }


    public async Task HandleCreate(MailModel mailToCreate)
    {
        mailToCreate.originalMailId = id;
        var mailIdClicked = currentModelAction.mail;
        await MailData.Reply(mailToCreate, id, mailIdClicked);
        @* bug will create here *@
        mails.Add(mailToCreate);
        currentAction = String.Empty;
        currentModelAction = new ActionModel();
        StateHasChanged();
    }


    public void AddListReceiver(ActionModel action)
    {
        var mailReply = mails.Where(x => x.id == action.mail).FirstOrDefault();
        switch (action.action)
        {
            case "reply":
                if(mailReply == null)
                {
                    toList = new List<string>();
                    if(mail.from == Layout.User.id)
                    {
                        toList.AddRange(mail.to);
                    }
                    else
                    {
                        toList.Add(mail.from);
                    }
                }
                else
                {
                    toList = new List<string>();
                    toList.Add(mailReply.from);
                }
                break;
            case "reply_all":
                toList = new List<string>();
                toList.AddRange(mail.to);
                toList.Add(mail.from);
                toList.Remove(Layout.User.id);
                break;
            default:
                break;
        }
    }
    
}
