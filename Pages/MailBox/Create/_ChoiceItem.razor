<li class="is-flex is-align-items-center is-gap-20">
    <span class="icon">
        <i class="material-icons-outlined">drag_indicator</i>
    </span>
    <div class="control is-flex-1">
        <label class="checkbox is_body2 is-secondary-20 is-flex">
            @if(isMultipleChoice) 
            {
                <span class="icon is-secondary-60">
                    <i class="material-icons-sharp">check_box_outline_blank</i>
                </span>  
            }
            else 
            { 
                <span class="icon is-secondary-60">
                    <i class="material-icons-sharp">radio_button_unchecked</i>
                </span>
            }
            <div class="search-wrapper question">
                <input 
                    class="search-input question" 
                    @bind="choice.text" 
                    type="text" 
                    placeholder="Lựa chọn @index" 
                    @oninput="HandleValueChanged">
            </div>
        </label>
    </div>
    <span class="icon is-pointer" @onclick="DeleteChoice">
        <i class="material-icons-outlined is-error-40">delete</i>
    </span>
</li>
@code{

    [Parameter] public int index { get;  set;}
    [Parameter] public bool isMultipleChoice { get; set; }
    [Parameter] public ChoiceModel choice { get; set; }
    [Parameter] public EventCallback<ChoiceModel> OnChoiceValueChanged { get; set; }
    [Parameter] public EventCallback<ChoiceModel> OnDeleteChoice { get; set; }


    private void HandleValueChanged(ChangeEventArgs args) 
    {
        OnChoiceValueChanged.InvokeAsync(
            new ChoiceModel {
                id = choice.id,
                text = args.Value.ToString()
            }
        );
    }


    private void DeleteChoice() 
    {
        OnDeleteChoice.InvokeAsync(choice);
    }
}