<div class="is-flex is-align-items-center is-gap-10-y" style="width: 100%;">
    <p class="is-secondary-40 is-font-14" style="width: 60px;">@name</p>
    <div class="textarea-mail is-flex-1 is-flex is-align-items-center is-flex-wrap-wrap" style="height: 100%; gap: 8px">
        @if(membersSelected.Count > 0)
        {
        <ul class="is-flex is-align-items-center is-gap-8">
            @foreach (var member in membersSelected)
            {
            <li class="is-flex is-align-items-center container-to">
                <figure class="image is-16x16">
                    <img class="is-rounded" src="@member.avatar">
                </figure>
                <span style="margin: 0px 8px 0px 4px; max-width: 75px; line-height: 16px;"
                    class="is-inline-block text-ellipsis is-secondary-10 is_label2">
                    @member.name
                </span>
                <span class="icon is-pointer" @onclick="() => HandelDeleteMember(member)">
                    <i class="material-icons-outlined is-secondary-10">
                        close
                    </i>
                </span>
            </li>
            }
        </ul>
        }
        @if(groupsSelected.Count > 0 )
        {
        <ul class="is-flex is-align-items-center is-gap-8">
            @foreach (var group in groupsSelected)
            {
            <li class="is-flex is-align-items-center container-to">
                <span class="is_caption is-secondary-40">Nh√≥m</span>
                <span style="margin: 0px 8px 0px 4px; max-width: 75px;"
                    class="is-inline-block text-ellipsis is-secondary-10 is_label2">
                    @group.name
                </span>
                <span class="icon is-pointer" @onclick="() => HandelDeleteGroup(group)">
                    <i class="material-icons-outlined is-secondary-10">
                        close
                    </i>
                </span>
            </li>
            }
        </ul>
        }
        <_AddMember members="members" directionDropdown="is-left" HandleSelectedMember="HandleSelectedMember" />
        <_AddGroupMember groups="groups" directionDropdown="is-left" HandleSelectedGroup="HandleSelectedGroup" />
    </div>
</div>

@code {
    [Parameter]
    public string name { get; set; }
    [Parameter]
    public List<MemberModel> members { get; set; }
    [Parameter]
    public List<GroupModel> groups { get; set; }
    [Parameter]
    public List<MemberModel> membersSelected { get; set; }
    [Parameter]
    public List<GroupModel> groupsSelected { get; set; }
    [Parameter]
    public EventCallback<MemberModel> HandleDeleteMemberSelected { get; set; }
    [Parameter]
    public EventCallback<GroupModel> HandleDeleteGroupSelected { get; set; }

    [Parameter] 
    public EventCallback<List<MemberModel>> HandleSelectedMember { get; set; }
    [Parameter]
    public EventCallback<List<GroupModel>> HandleSelectedGroup { get; set; }


    private void HandelDeleteMember(MemberModel member) 
    {
        HandleDeleteMemberSelected.InvokeAsync(member);
    }


    private void HandelDeleteGroup(GroupModel group) 
    {
        HandleDeleteGroupSelected.InvokeAsync(group);
    }
    
}