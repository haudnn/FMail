@page "/create"
@layout LayoutMain
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@using Blazored.TextEditor
@using System.IO;
@using System;
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Tạo thư mới</PageTitle>
<section class="is-padding-20">

    <div class="is-flex is-align-items-center is-justify-content-flex-start is-gap-20">
        <a href="mail/inbox" class="is-flex is-align-items-center is-gap-8 is-pointer ">
            <span class="icon">
                <i class="material-icons-outlined is-primary-40">arrow_back</i>
            </span>
            <span class="is-primary-40 is_button">Trở về</span>
        </a>
        <div class="is-flex is-align-items-center is-gap-10-y">
            <span class="is_body2 is-secondary-40">
                Danh mục:
            </span>
            <div class="dropdown is-right @(toogleShowCategories.IsToggled ? " is-active" : "" )">
                <div class="dropdown-trigger is-hover drop-border is-flex is-align-items-center" style="padding: 0 8px;" @onclick="HandleShowCategories">
                    <span class="is-secondary-20 is_caption" style="line-height: 24px;">@currentCategory.name</span>
                    <span class="icon is-secondary-20">
                        <i class="material-icons-sharp">arrow_drop_down</i>
                    </span>
                </div>
                <div class="dropdown-menu is-small">
                    <ul class="dropdown-content" style="padding: 8px">
                        @foreach (var category in categories)
                        {
                            <li class="dropdown-item" style="padding: 4px 8px;" @onclick="() => HandleChooseCategory(category)">
                                <span class="is_caption is-secondary-20">@category.name</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="is-flex is-align-items-center is-gap-8 is-pointer">
            @if(isStar) 
            { 
                <span class="icon" @onclick="() => HandleStarMail(false)">
                    <i class="material-icons-sharp is-warning-20">star_purple500</i>
                </span>
            }
            else 
            {
                <span class="icon star" @onclick="() => HandleStarMail(true)">
                    <i class="material-symbols-outlined">star</i>
                </span>
            }
            <span class="is_body2 is-secondary-40">Đánh dấu quan trọng</span>
        </div>
        <div class="dropdown is-left @(toggleShowLabel.IsToggled ? "is-active" : "" )">
            <div class="dropdown-trigger is-flex is-align-items-center is-gap-8 is-pointer" @onclick="HandelToggleShowLabel">
                <span class="icon">
                    <i class="material-icons-outlined is-error-40">label</i>
                </span>
                <span class="is_body2 is-secondary-20">Nhãn</span>
            </div>
            <div class="dropdown-menu" style="min-width: 250px; min-height: 280px;">
                <div class="dropdown-content is-padding-10">
                    <p class="is_sub2 is-secondary-10 is-padding-bottom-20">Danh sách nhãn</p>
                    <ul class="is-flex is-flex-direction-column is-gap-10-x">
                        @foreach (var label in labels)
                        {
                            <li class="dropdown-item filter is-flex is-align-items-center px-0 py-0 is-gap-8">
                                @if(labelsSelected.Contains(label)) {
                                    <span class="icon is-small" @onclick="() => HandelChooseLabel(label)">
                                        <i class="material-icons-sharp is-secondary-40">check_box</i>
                                    </span>  
                                }
                                else { 
                                    <span class="icon is-small" @onclick="() => HandelChooseLabel(label)">
                                        <i class="material-icons-outlined is-secondary-40">check_box_outline_blank</i>
                                    </span>
                                }
                                <div class="is-flex is-align-items-center">
                                    <span class="icon">
                                        <i class="material-symbols-sharp" style="color: @label.color; font-size: 12px">label</i>
                                    </span>
                                    <span class="is_body2 is-secondary-10">@label.name</span>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <ul class="is-flex is-align-items-center is-gap-8">
            @foreach (var label in labelsSelected)
            {
                <li class="is-flex is-align-items-center is-gap-4" style="border-radius: 5px; padding: 5px ;background-color: @(label.color + "33")">
                    <span class="is_caption" style="color: @label.color">@label.name</span>
                    <div class="wrapper-icon-24-rounded is-flex is-align-items-center is-justify-content-center" style="width: 16px; height: 16px;" @onclick="() => HandelChooseLabel(label)">
                        <span class="icon">
                            <i class="material-icons-outlined has-text-white" style="font-size: 9px;">close</i>
                        </span>
                    </div>
                </li>
            }
        </ul>
    </div>

    <main class="create">
        <div class="is-flex is-flex-direction-column is-gap-10-x is-padding-20-x">
            <div class="is-flex is-align-items-center is-gap-10-y" style="width: 100%;">
                <p class="is-secondary-40 is-font-14" style="width: 60px;">To</p>
                <div class="textarea-mail is-flex-1 is-flex is-align-items-center is-flex-wrap-wrap" style="height: 100%; gap: 8px">
                    @if(membersSelected.Count > 0) 
                    {
                        <ul class="is-flex is-align-items-center" style="flex-wrap: wrap; gap: 8px">
                            @foreach (var member in membersSelected)
                            {
                            <li class="is-flex is-align-items-center container-to">
                                <figure class="image is-16x16">
                                    <img class="is-rounded" src="@member.avatar">
                                </figure>
                                <span 
                                    style="margin: 0px 8px 0px 4px; max-width: 75px; line-height: 16px;" 
                                    class="is-inline-block text-ellipsis is-secondary-10 is_label2">
                                    @member.name
                                </span>
                                <span class="icon is-pointer" @onclick="() => HandleDeleteMemberSelected(member)">
                                    <i class="material-icons-outlined is-secondary-10">
                                        close
                                    </i>
                                </span>
                            </li>
                            }
                        </ul>
                    }
                    @if(groupsSelected.Count > 0 ) 
                    {
                        <ul class="is-flex is-align-items-center"  style="flex-wrap: wrap; gap: 8px">
                            @foreach (var group in groupsSelected)
                            {
                                <li class="is-flex is-align-items-center container-to">
                                    <span class="is_caption is-secondary-40">Nhóm</span>
                                    <span 
                                        style="margin: 0px 8px 0px 4px; max-width: 75px;" 
                                        class="is-inline-block text-ellipsis is-secondary-10 is_label2">
                                        @group.name
                                    </span>
                                    <span class="icon is-pointer" @onclick="() => HandleDeleteGroupSelected(group)">
                                        <i class="material-icons-outlined is-secondary-10">
                                            close
                                        </i>
                                    </span>
                                </li> 
                            }
                        </ul>
                    }
                    <_AddMember members="members" directionDropdown="is-left" HandleSelectedMember="HandleSelectedMember"/>
                    <_AddGroupMember groups="groups" directionDropdown="is-left" HandleSelectedGroup="HandleSelectedGroup"/>
                </div>
                @if(!toggleAddCC) 
                {
                <div class="is-flex is-align-items-center is-justify-content-center is-gap-10-y" style="height: 100%;">
                    <span @onclick="ToggleAddCC" class="is-font-12 is-primary-40 is-pointer">CC</span>
                    <span @onclick="ToggleAddCC" class="is-font-12 is-primary-40 is-pointer">BCC</span>
                </div>
                }
            </div>
            @if(toggleAddCC) 
            {
               @* <_AddReceiver name="cc" members="members" groups="groups"/>
               <_AddReceiver name="bcc" members="members" groups="groups"/> *@
            }
            <div class="is-flex is-align-items-center is-gap-10-y">
                <p class="is-secondary-40 is-font-14" style="width: 60px;">Tiêu đề</p>
                <textarea placeholder="Tiêu đề thư" class="textarea-mail" @bind="@subject"></textarea>
            </div>
        </div>
        <div class="create__main-container">
            <div>
                <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Nhập nội dung thư">
                    <EditorContent>
                    </EditorContent>
                    <ToolbarContent>
                        <div class="toolbar-create" style="left: @(Layout.isToogleSideBar ? "80" : "220" )px">
                            <div class="wrapper-button is-justify-content-center is-inline-flex primary-btn"
                                style="padding: 10px 40px;" @onclick="CreateMail">
                                <span class="is-font-14">Gửi</span>
                            </div>
                            <div class="is-flex-1">
                                <span class="ql-formats">
                                    <select class="ql-font">
                                        <option value=""></option>
                                        <option value="serif"></option>
                                        <option value="monospace"></option>
                                    </select>
                                    <select class="ql-size">
                                        <option value="small"></option>
                                        <option selected=""></option>
                                        <option value="large"></option>
                                        <option value="huge"></option>
                                    </select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                    <button class="ql-indent" value="-1"></button>
                                    <button class="ql-indent" value="+1"></button>
                                    <button class="ql-blockquote"></button>
                                    <select class="ql-align">
                                        <option selected=""></option>
                                        <option value="center"></option>
                                        <option value="right"></option>
                                        <option value="justify"></option>
                                    </select>
                                </span>
                                <span class="ql-formats">
                                    <button>
                                        <label for="fileInput">
                                            <i class="material-icons-outlined">link</i>
                                        </label>
                                    </button>
                                    <button class="ql-link"></button>
                                    <button class="ql-image"></button>
                                </span>
                            
                            </div>
                            <div class="is-flex is-align-items-center is-gap-8">
                                <div class="wrapper-button is-justify-content-center is-inline-flex"
                                    style="padding: 9px 10px">
                                    <span class="icon">
                                        <i class="material-icons-outlined is-primary-40">mail</i>
                                    </span>
                                    <span class="is_body2 is-primary-40">Lưu nháp</span>
                                </div>
                                <div class="wrapper-button is-justify-content-center is-inline-flex error-btn"
                                    style="padding: 9px 10px">
                                    <span class="icon">
                                        <i class="material-icons-outlined">close</i>
                                    </span>
                                    <span class="is-font-14">Hủy tạo</span>
                                </div>
                            </div>
                        </div>
                    </ToolbarContent>
                </BlazoredTextEditor>
                <InputFile 
                    multiple 
                    id="fileInput" 
                    style="display:none;"
                    OnChange="@UploadFile" 
                    accept="
                        application/pdf,
                        image/png,
                        image/jpg,
                        image/jpeg,
                        application/msword,
                        application/vnd.openxmlformats-officedocument.wordprocessingml.document,
                        application/vnd.ms-excel,
                        application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"/>
                <div style="padding: 40px 0px 20px 0px">
                    <ul class="attachments-list mt-0">
                        @foreach (var file in files)
                        {
                            <li class="attachment-item">
                                <img style="width: 16px; height: 16px;" src="@string.Concat("images/", file.icon, ".png")">
                                <span>@file.name</span>
                                <span class="icon is-pointer" @onclick="() => HandleDeleteFile(file)">
                                    <i class="material-icons-outlined">close</i>    
                                </span>
                            </li>
                        }
                    </ul>
                </div>

                @if(!toggleCreatePoll.IsToggled) {
                    <div class="wrapper-button primary-btn is-bg-main is-pointer"
                        style="display: inline-flex; margin-bottom: 20px;" @onclick="HandleToogleCreatePoll">
                        <span class="icon has-text-white">
                            <i class="material-icons-outlined">poll</i>
                        </span>
                        <span class="has-text-white is-font-12">Tạo khảo sát</span>
                    </div>
                }
                else{
                    @if(!isDoneCreatePoll){
                        <_Poll poll="poll" HandleToogleCreatePoll="HandleToogleCreatePoll" HandelCreatePoll="HandelCreatePoll"/>
                    }
                    else{ 
                        <_ContentPoll poll="poll" HandleEditPoll="HandleEditPoll"/>
                    }
                 
                }
            </div>
        </div>
        <div class="is-padding-top-20" style="padding-bottom: 100px;">
            <div class="is-flex is-align-items-center is-gap-10-y">
                <span>Chữ ký:</span>
                <div class="dropdown is-up click @(toggleActiveSign ? " is-active" : "" )">
                    <div class="dropdown-trigger is-hover drop-border" @onclick='ToggleActiveSign'>
                        <div class=" is-flex is-align-items-center">
                            <span class="is-secondary-20 is-font-14">@(currentSignature.name != null ? currentSignature.name : "Không có chữ ký" )</span>
                            <span class="icon">
                                <i class="material-icons-sharp read">arrow_drop_down</i>
                            </span>
                        </div>
                    </div>
                    <div class="dropdown-menu" style="min-width: 185px;">
                        <div class="dropdown-content" style="padding: 10px;">
                            <div class="dropdown-item is-flex is-align-items-center is-gap-4" @onclick="() => HandleChooseSignature(null)">
                                <span class="icon"></span>
                                <span class="is_body2">Không có chữ ký</span>
                            </div>
                            @foreach ( var signature in signatures)
                            {
                            <div class="dropdown-item is-flex is-align-items-center is-gap-4" @onclick="() => HandleChooseSignature(signature)">
                                <span class="icon"></span>
                                <span class="is_body2">@signature.name</span>
                            </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="is_sub2 is-secondary-10 pt-4">
                @((MarkupString)QuillHTMLContentSignature)
            </div>

        </div>
    </main>
</section>
@code {
    [CascadingParameter]
    public LayoutMain Layout { get; set; }
    BlazoredTextEditor QuillHtml;
    string QuillHTMLContent;
    string QuillHTMLContentSignature;
    public string subject = String.Empty;
    private bool toggleActiveSign = false;
    private CategoryModel currentCategory = new CategoryModel();
    private SignatureModel currentSignature = new SignatureModel();
    private bool isDoneCreatePoll = false;
    private ToggleHelper toggleShowLabel = new ToggleHelper();
    public ToggleHelper toggleCreatePoll = new ToggleHelper();
    private bool isStar = false;
    private bool toggleActiveAddMember = false;
    private bool toggleActiveAddGroup = false;
    private bool toggleAddCC = false;
    private ToggleHelper toogleShowCategories = new ToggleHelper();
    private List<LabelModel> labelsSelected = new List<LabelModel>();
    private List<MemberModel> membersSelected = new List<MemberModel>();
    private List<GroupModel> groupsSelected = new List<GroupModel>();
    public List<CategoryModel> categories = new List<CategoryModel>();
    public List<LabelModel> labels = new List<LabelModel>();
    public List<SignatureModel> signatures = new List<SignatureModel>();
    public List<MemberModel> members  = new List<MemberModel>();
    public List<GroupModel> groups = new List<GroupModel>();
    public List<MemberModel> membersCC =  new List<MemberModel>();
    public List<GroupModel> groupsCC = new List<GroupModel>();
    public List<MemberModel> membersBCC =  new List<MemberModel>();
    public List<GroupModel> groupsBCC = new List<GroupModel>();

    public PollModel poll = new();
    private long maxFileSize = 25 * 1024 * 1024; 
    private long totalFileSize;

    protected override async Task OnInitializedAsync()
    {
        
        categories = await CategoryData.GetAllCategory();
        labels = await LabelData.GetAllLabels();
        groups = await GroupData.GetAllGroups();
        signatures = await SignatureData.GetAllSignatures();
        currentCategory = categories.LastOrDefault();
        members = InitDataFakeHelper.InitMembers();
    }

    private void HandleShowCategories() 
    {
        toogleShowCategories.Toggle();
    }

    private void HandleToogleCreatePoll() 
    {
        poll = new PollModel
        {
            id = GenerateIDHelper.GenerateID("19012001"),
            title = "",
            endDate = DateTime.Today.ToString("dd/MM/yyyy"),
            endTime = DateTime.Today.ToString("HH:mm"),
            questions = new List<QuestionModel>
            {
                new QuestionModel
                {
                    id = GenerateIDHelper.GenerateID("19012001"),
                    text = "",
                    isMultipleChoice = false,
                    choices  = new List<ChoiceModel> 
                        {
                            new ChoiceModel {
                                id = GenerateIDHelper.GenerateID("19012001"),
                                text = "",
                            }
                        }
                }
            }
        };
        toggleCreatePoll.Toggle();
    }

    protected override async Task OnParametersSetAsync()
    {
    }

    private void ToggleAddCC()
    {
        toggleAddCC = true;
    }


    private void ToggleActiveSign()
    {
        toggleActiveSign = !toggleActiveSign;
    }

    private void HandleStarMail(bool isStarMail)
    {
        isStar = isStarMail;
    }


    private void ToggleActiveAddMember(bool isActiveAddMember)
    {
        toggleActiveAddMember = isActiveAddMember;
    }


    private void ToggleActiveAddGroup() 
    {
        toggleActiveAddGroup = !toggleActiveAddGroup;
    }



    private void HandelToggleShowLabel() 
    { 
        toggleShowLabel.Toggle();
    }


    private void HandelChooseLabel(LabelModel label) 
    {
        if (labelsSelected.Contains(label))
        {
            labelsSelected.Remove(label);
        }
        else
        {
            labelsSelected.Add(label);
        }
    }
    

    private async Task HandleChooseSignature(SignatureModel signature) 
    {
        if(signature == null) {
            currentSignature = new SignatureModel();
            QuillHTMLContentSignature = String.Empty;
            toggleActiveSign = !toggleActiveSign;
            return;
        }
        SignatureModel getSignature =  await SignatureData.GetSignatureById(signature.id);
        currentSignature = signature;
        QuillHTMLContentSignature = getSignature.body;
        toggleActiveSign = !toggleActiveSign;
        StateHasChanged();
    }


    private void HandleSelectedMember(List<MemberModel> membersList) { 
        List<MemberModel> clonedList = new List<MemberModel>(membersSelected);
        clonedList.AddRange(membersList);
        membersSelected = clonedList;
    }


    private void HandleDeleteMemberSelected(MemberModel member) 
    {
        membersSelected.Remove(member);
        members.Add(member);
    }


    private void HandleSelectedGroup(List<GroupModel> groupsList) 
    { 
        List<GroupModel> clonedList = new List<GroupModel>(groupsSelected);
        clonedList.AddRange(groupsList);
        groupsSelected = clonedList;
    }


    private void HandleDeleteGroupSelected(GroupModel group) 
    {
        groupsSelected.Remove(group);
        groups.Add(group);
    }


    public async Task HandelCreatePoll() 
    {
        bool isValidPoll = await IsValidPoll();
        if (!isValidPoll) { 
            return;
        }
        isDoneCreatePoll = true;
        StateHasChanged();
    }


    private List<AttachmentModel> files =new List<AttachmentModel>();

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        try {
            foreach (var file in e.GetMultipleFiles())
            {
                if(!FileHelper.IsValidFileType(file)) 
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Định dạng file hiện tại không cho phép. Chỉ PDF, PNG, JPG, JPEG, DOC, DOCX, XLS, and XLSX là các tệp mở rộng cho phép.");
                    return;
                }
                if (totalFileSize + file.Size > maxFileSize)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Tối đa 25MB cho tất cả các file!");
                    return;
                }

                // var total = files.Sum(x => x.size);
                totalFileSize += file.Size;
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                string filePath = await FileHelper.SaveFileAsync(fileContent, file.Name);
                await JSRuntime.InvokeVoidAsync("alert", "Upload thành công");
                files.Add(new AttachmentModel {
                    id = "1",
                    name = file.Name,
                    size = file.Size,
                    contentType = file.ContentType,
                    filePath = filePath,
                });
            }
        }
        catch(Exception ex) {
            Console.WriteLine(ex.ToString());
        }
    }


    private void HandleDeleteFile(AttachmentModel fileDelete) 
    {
        FileHelper.DeleteFile(fileDelete.filePath);
        AttachmentModel fileToDelete = files.FirstOrDefault(file => file.filePath == fileDelete.filePath);
        if (fileToDelete != null)
        {
            files.Remove(fileToDelete);
        }
        StateHasChanged();
    }


    private void HandleEditPoll()
    {
        isDoneCreatePoll = false;
    }


    private async Task<bool> IsValidPoll()
    {
        if (string.IsNullOrEmpty(poll.title))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Tên khảo sát không được trống!");
            return false;
        }

        int questionCount = poll.questions.Count;
        if( questionCount == 0) {
            await JSRuntime.InvokeVoidAsync("alert", "Vui lòng thêm câu hỏi!");
            return false;
        }
        for (int i = 0; i < questionCount; i++)
        {
            var question = poll.questions[i];
            if (string.IsNullOrEmpty(question.text))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Nội dung câu hỏi không được trống!");
                return false;
            }

            int choiceCount = question.choices.Count;
            if( choiceCount == 0) {
                await JSRuntime.InvokeVoidAsync("alert", "Vui lòng thêm lựa chọn!");
                return false;
            }
            for (int j = 0; j < choiceCount; j++)
            {
                if (string.IsNullOrEmpty(question.choices[j].text))
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Lựa chọn không được trống!");
                    return false;
                }
            }
        }
        return true;
    }


    private void HandleChooseCategory(CategoryModel categorySelected) 
    {
        currentCategory = categorySelected;
        toogleShowCategories.ToggleFalse();
    }


    public async Task CreateMail() 
    {
        bool isValidMail = await IsValidMail();
        if(!isValidMail) 
        {
            return;
        }
        QuillHTMLContent = await QuillHtml.GetHTML();
        string shortBody = await QuillHtml.GetText();
        MailModel mailToCreate = new MailModel
        {
            id = GenerateIDHelper.GenerateID("19012001"),
            from = Layout.User.email,
            category = currentCategory.id,
            isImportant = isStar,
            labels = labelsSelected.Select(l => l.id).ToList(),
            to = membersSelected,
            cc = new List<MemberModel>(),
            bcc = new List<MemberModel>(), 
            subject = subject == String.Empty ? "Không có chủ đề" : subject,
            body = QuillHTMLContent,
            attachments = files,
            signature = currentSignature,
            sentDate = DateTimeHelper.FormatDateTimeUTC(),
            author = Layout.User.id,
            folder = "sent",
            shortBody = shortBody.Length > 50 ? shortBody.Substring(0, 50) : shortBody,
        };
        if(toggleCreatePoll.IsToggled) {
            bool isCreatedPollSuccess = await PollData.CreatePoll(poll);
            if(isCreatedPollSuccess) {
                mailToCreate.pollId = poll.id;
                await MailData.CreateMail(mailToCreate);
                await JSRuntime.InvokeVoidAsync("alert", "Tạo mail thành công!");   
            };
        }
        else {
            await MailData.CreateMail(mailToCreate);
            await JSRuntime.InvokeVoidAsync("alert", "Tạo mail thành công!");      
        }
        navigation.NavigateTo("/mail/inbox", true);
    }


    private async Task<bool> IsValidMail() 
    {
        if(membersSelected.Count == 0) 
        {
            await JSRuntime.InvokeVoidAsync("alert", "Danh sách người nhận không được trống!");   
            return false;
        }
        @* if(string.IsNullOrEmpty(QuillHTMLContent)) {
            await JSRuntime.InvokeVoidAsync("alert", "Nội dung của thư không được trống!");   
            return false;
        } *@
        return true;
    }
}