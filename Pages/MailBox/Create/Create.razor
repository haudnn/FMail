@page "/create"
@layout LayoutMain
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@using Blazored.TextEditor
@using System.IO;
@using System;
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject ProtectedLocalStorage storage

<PageTitle>Tạo thư mới</PageTitle>
<section class="is-padding-20">

    <div class="is-flex is-align-items-center is-justify-content-flex-start is-gap-20">
        <a href="mail/inbox" class="is-flex is-align-items-center is-gap-8 is-pointer ">
            <span class="icon">
                <i class="material-icons-outlined is-primary-40">arrow_back</i>
            </span>
            <span class="is-primary-40 is_button">Trở về</span>
        </a>
        <div class="is-flex is-align-items-center is-gap-10-y">
            <span class="is_body2 is-secondary-40">
                Danh mục:
            </span>
            <div class="dropdown is-right @(toogleShowCategories.IsToggled ? "is-active" : "" )">
                <div class="dropdown-trigger is-hover drop-border is-flex is-align-items-center" style="padding: 0 8px;" @onclick="HandleShowCategories">
                    <span class="is-secondary-20 is_caption" style="line-height: 24px;">@currentCategory.name</span>
                    <span class="icon is-secondary-20">
                        <i class="material-icons-sharp">arrow_drop_down</i>
                    </span>
                </div>
                <div class="dropdown-menu is-small">
                    <ul class="dropdown-content" style="padding: 8px">
                        @foreach (var category in categories.Where(c => c.name != "Khác"))
                        {
                            <li class="dropdown-item" style="padding: 4px 8px;" @onclick="() => HandleChooseCategory(category)">
                                <span class="is_caption is-secondary-20">@category.name</span>
                            </li>
                        }
                            <li class="dropdown-item" style="padding: 4px 8px;" @onclick="() => HandleChooseCategory(null)">
                                <span class="is_caption is-secondary-20">Khác</span>
                            </li>
                    </ul>
                </div>
            </div>
        </div>
        <_StarMail
            isShowText="true"
            isStared="@isStar"
            HandleStarMail="HandleStarMail"
        />
        <_SelectedLabels 
            labels="labels"
            labelsSelected="labelsSelected"
            HandleChooseLabel="HandleChooseLabel"
        />
    </div>

    <main class="create">
        <div class="is-flex is-flex-direction-column is-gap-10-x is-padding-20-x">
            <div class="is-flex is-align-items-center is-gap-10-y" style="width: 100%;">
                <div class="is-flex is-align-items-center is-gap-10-y" style="width: 100%;">
                    <p class="is-secondary-40 is-font-14" style="width: 60px;">To</p>
                    <div class="textarea-mail is-flex-1 is-flex is-align-items-center is-flex-wrap-wrap" style="height: 100%; gap: 8px">
                        <_AddReceiver
                            nameReceiver="To"
                            groups="groups"
                            members="members"
                            groupsSelected="groupsSelected"
                            membersSelected="membersSelected"
                            originalMembers="originalMembers"
                            OnUpdateMembersSelected="OnUpdateMembersSelected"
                        />
                    </div>
                </div>
                @if(!toggleAddCC) 
                {
                    <div class="is-flex is-align-items-center is-justify-content-center is-gap-10-y" style="height: 100%;">
                        <span @onclick="ToggleAddCC" class="is-font-12 is-primary-40 is-pointer">CC</span>
                        <span @onclick="ToggleAddCC" class="is-font-12 is-primary-40 is-pointer">BCC</span>
                    </div>
                }
            </div>

            @if(toggleAddCC) 
            {  
                <div class="is-flex is-align-items-center is-gap-10-y" style="width: 100%;">
                    <p class="is-secondary-40 is-font-14" style="width: 60px;">CC</p>
                    <div class="textarea-mail is-flex-1 is-flex is-align-items-center is-flex-wrap-wrap" style="height: 100%; gap: 8px">
                        <_AddReceiver
                            nameReceiver="CC"
                            groups="groupsCC"
                            groupsSelected="groupsCCSelected"
                            membersSelected="membersCCSelected"
                            members="membersBCC"
                            originalMembers="originalMembers"
                            OnUpdateMembersSelected="OnUpdateMembersSelected"
                        />
                    </div>
                </div>

                <div class="is-flex is-align-items-center is-gap-10-y" style="width: 100%;">
                    <p class="is-secondary-40 is-font-14" style="width: 60px;">BCC</p>
                    <div class="textarea-mail is-flex-1 is-flex is-align-items-center is-flex-wrap-wrap" style="height: 100%; gap: 8px">
                    <_AddReceiver
                        nameReceiver="BCC"
                        groups="groupsBCC"
                        groupsSelected="groupsBCCSelected"
                        membersSelected="membersBCCSelected"
                        members="membersCC"
                        originalMembers="originalMembers"
                        OnUpdateMembersSelected="OnUpdateMembersSelected"
                    />
                    </div>
                </div>
            }
            <div class="is-flex is-align-items-center is-gap-10-y">
                <p class="is-secondary-40 is-font-14" style="width: 60px;">Tiêu đề</p>
                <textarea placeholder="Tiêu đề thư" class="textarea-mail" @bind="@subject"></textarea>
            </div>
        </div>
        <div class="create__main-container">
            <div>
                    <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Nhập nội dung thư">
                            <EditorContent></EditorContent> 
                        <ToolbarContent>
                            <div class="toolbar-create" style="left: @(Layout.isToogleSideBar ? "80" : "220" )px">
                                <div class="wrapper-button is-justify-content-center is-inline-flex primary-btn"
                                    style="padding: 10px 40px;" @onclick="CreateMail">
                                    <span class="is-font-14">Gửi</span>
                                </div>
                                <div class="is-flex-1">
                                    <span class="ql-formats">
                                        <select class="ql-font">
                                            <option value=""></option>
                                            <option value="serif"></option>
                                            <option value="monospace"></option>
                                        </select>
                                        <select class="ql-size">
                                            <option value="small"></option>
                                            <option selected=""></option>
                                            <option value="large"></option>
                                            <option value="huge"></option>
                                        </select>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-bold"></button>
                                        <button class="ql-italic"></button>
                                        <button class="ql-underline"></button>
                                        <button class="ql-strike"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <select class="ql-color"></select>
                                        <select class="ql-background"></select>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-list" value="ordered"></button>
                                        <button class="ql-list" value="bullet"></button>
                                        <button class="ql-indent" value="-1"></button>
                                        <button class="ql-indent" value="+1"></button>
                                        <button class="ql-blockquote"></button>
                                        <select class="ql-align">
                                            <option selected=""></option>
                                            <option value="center"></option>
                                            <option value="right"></option>
                                            <option value="justify"></option>
                                        </select>
                                    </span>
                                    <span class="ql-formats">
                                        <button>
                                            <label for="fileInput">
                                                <i class="material-icons-outlined">link</i>
                                            </label>
                                        </button>
                                        <button class="ql-link"></button>
                                        <button class="ql-image"></button>
                                    </span>
                                
                                </div>
                                <div class="is-flex is-align-items-center is-gap-8">
                                    <div @onclick="Draft" class="wrapper-button is-justify-content-center is-inline-flex" style="padding: 9px 10px">
                                        <span class="icon">
                                            <i class="material-icons-outlined is-primary-40">mail</i>
                                        </span>
                                        <span class="is_body2 is-primary-40">Lưu nháp</span>
                                    </div>
                                    <div @onclick="CancelCreate" class="wrapper-button is-justify-content-center is-inline-flex error-btn"
                                        style="padding: 9px 10px">
                                        <span class="icon">
                                            <i class="material-icons-outlined">close</i>
                                        </span>
                                        <span class="is-font-14">Hủy tạo</span>
                                    </div>
                                </div>
                            </div>
                        </ToolbarContent>
                    </BlazoredTextEditor>
                <InputFile 
                    multiple 
                    id="fileInput" 
                    style="display:none;"
                    OnChange="@UploadFile" 
                    accept="
                        application/pdf,
                        image/png,
                        image/jpg,
                        image/jpeg,
                        application/msword,
                        application/vnd.openxmlformats-officedocument.wordprocessingml.document,
                        application/vnd.ms-excel,
                        application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"/>
                <div style="padding: 40px 0px 20px 0px">
                    <ul class="attachments-list mt-0">
                        @foreach (var file in files)
                        {
                            <li class="attachment-item">
                                <img style="width: 16px; height: 16px;" src="@string.Concat("images/", file.icon, ".png")">
                                <span>@file.name</span>
                                <span class="icon is-pointer" @onclick="() => HandleDeleteFile(file)">
                                    <i class="material-icons-outlined">close</i>    
                                </span>
                            </li>
                        }
                    </ul>
                </div>

                @if(!toggleCreatePoll.IsToggled) {
                    <div class="wrapper-button primary-btn is-bg-main is-pointer"
                        style="display: inline-flex; margin-bottom: 20px;" @onclick="HandleToogleCreatePoll">
                        <span class="icon has-text-white">
                            <i class="material-icons-outlined">poll</i>
                        </span>
                        <span class="has-text-white is-font-12">Tạo khảo sát</span>
                    </div>
                }
                else
                {
                    @if(!isDoneCreatePoll){
                        <_Poll poll="poll" HandleToogleCreatePoll="HandleToogleCreatePoll" HandelCreatePoll="HandelCreatePoll"/>
                    }
                    else{ 
                        <_ContentPoll poll="poll" HandleEditPoll="HandleEditPoll"/>
                    }
                 
                }
            </div>
        </div>
            <_SignatureZone HandleChooseSignature="HandleChooseSignature" />
    </main>
</section>
@code {
    [CascadingParameter]
    public LayoutMain Layout { get; set; }
    private CategoryModel currentCategory = new CategoryModel();
    private SignatureModel currentSignature = new SignatureModel();
    public ToggleHelper toggleCreatePoll = new ToggleHelper();
    private ToggleHelper toogleShowCategories = new ToggleHelper();
    private List<LabelModel> labelsSelected = new List<LabelModel>();
    private List<MemberModel> membersSelected = new List<MemberModel>();
    private List<GroupModel> groupsSelected = new List<GroupModel>();
    private List<MemberModel> membersCCSelected = new List<MemberModel>();
    private List<GroupModel> groupsCCSelected = new List<GroupModel>();
    private List<MemberModel> membersBCCSelected = new List<MemberModel>();
    private List<GroupModel> groupsBCCSelected = new List<GroupModel>();
    public List<CategoryModel> categories = new List<CategoryModel>();
    public List<LabelModel> labels = new List<LabelModel>();
    public List<SignatureModel> signatures = new List<SignatureModel>();
    public List<MemberModel> members  = new List<MemberModel>();
    public List<GroupModel> groups = new List<GroupModel>();
    public List<MemberModel> membersCC =  new List<MemberModel>();
    public List<GroupModel> groupsCC = new List<GroupModel>();
    public List<MemberModel> membersBCC =  new List<MemberModel>();
    public List<GroupModel> groupsBCC = new List<GroupModel>();
    private List<MemberModel> originalMembers = new List<MemberModel>(); 
    private List<GroupModel> originalGroups = new List<GroupModel>(); 
    public PollModel poll = new();
    private long maxFileSize = 25 * 1024 * 1024; 
    private long totalFileSize;
    private bool isStar = false;
    private bool toggleAddCC = false;
    private bool isDoneCreatePoll = false;
    public string subject = String.Empty;
    public string mailId = String.Empty;
    BlazoredTextEditor QuillHtml;
    string QuillHTMLContent;
    string QuillHTMLContentSignature;
    private List<AttachmentModel> files = new List<AttachmentModel>();


    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryData.GetAllCategory();
        labels = await LabelData.GetAllLabels(Layout.User.id);
        currentCategory = categories.FirstOrDefault(c => c.name == "Khác");
        currentSignature = await SignatureData.GetDefaultSignature(Layout.User.id);

        originalGroups = await GroupData.GetAllGroups();
        groups = originalGroups.ToList();
        groupsCC = originalGroups.ToList();
        groupsBCC = originalGroups.ToList();

        originalMembers = InitDataFakeHelper.InitMembersHasCondition(Layout.User.id);
        members = originalMembers.ToList();
        membersCC = originalMembers.ToList();
        membersBCC = originalMembers.ToList();



        var uri = navigation.ToAbsoluteUri(navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);
        if(queryParams.ContainsKey("mailId")) 
        {
            mailId = queryParams["mailId"];
            MailModel mail = await MailData.GetMailById(mailId);
            isStar = mail.isImportant;
            QuillHTMLContent = mail.body;
            membersSelected = InitDataFakeHelper.GetMembersById(mail.to);
            membersCCSelected = InitDataFakeHelper.GetMembersById(mail.cc);
            membersBCCSelected = InitDataFakeHelper.GetMembersById(mail.bcc);
            subject = mail.subject;
            files = mail.attachments;
            currentSignature = mail.signature;
            currentCategory = await CategoryData.GetCategoryById(mail.category);
            labelsSelected = await LabelData.FindLabelsByIds(mail.labels);
            if(!string.IsNullOrEmpty((mail.pollId)))
            {
                poll = await PollData.GetPollById(mail.pollId);
                toggleCreatePoll.Toggle();
                isDoneCreatePoll = true;
            }            

        }
    }  
    private void HandleShowCategories() 
    {
        toogleShowCategories.Toggle();
    }

    private void HandleToogleCreatePoll() 
    {
        poll = new PollModel
        {
            id = GenerateIDHelper.GenerateID("19012001"),
            title = "",
            endDate = DateTime.Today.ToString("dd/MM/yyyy"),
            endTime = DateTime.Today.ToString("23:59"),
            isStopped = false,
            author= Layout.User.id,
            questions = new List<QuestionModel>
            {
                new QuestionModel
                {
                    id = GenerateIDHelper.GenerateID("19012001"),
                    text = "",
                    isMultipleChoice = false,
                    choices  = new List<ChoiceModel> 
                        {
                            new ChoiceModel 
                            {
                                id = GenerateIDHelper.GenerateID("19012001"),
                                text = "",
                                voters = new List<string>(),
                            }
                        },
                }
            }
        };
        toggleCreatePoll.Toggle();
    }

    protected override async Task OnParametersSetAsync()
    {

    }

    private void ToggleAddCC()
    {
        toggleAddCC = true;
    }



    private void HandleStarMail(bool isStarMail)
    {
        isStar = isStarMail;
    }


    private void HandleChooseLabel(LabelModel label) 
    {
        if (labelsSelected.Contains(label))
        {
            labelsSelected.Remove(label);
        }
        else
        {
            labelsSelected.Add(label);
        }
    }


    private void HandleChooseSignature(SignatureModel signature) 
    {
        currentSignature = signature;
    }

    public async Task HandelCreatePoll() 
    {
        bool isValidPoll = await IsValidPoll();
        if (!isValidPoll) { 
            return;
        }
        isDoneCreatePoll = true;
        StateHasChanged();
    }




    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        try {
            foreach (var file in e.GetMultipleFiles())
            {
                if(!FileHelper.IsValidFileType(file)) 
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Định dạng file hiện tại không cho phép. Chỉ PDF, PNG, JPG, JPEG, DOC, DOCX, XLS, and XLSX là các tệp mở rộng cho phép.");
                    return;
                }
                if (totalFileSize + file.Size > maxFileSize)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Tối đa 25MB cho tất cả các file!");
                    return;
                }
                totalFileSize += file.Size;
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                string filePath = await FileHelper.SaveFileAsync(fileContent, file.Name);
                await JSRuntime.InvokeVoidAsync("alert", "Upload thành công");
                files.Add(new AttachmentModel {
                    id = "1",
                    name = file.Name,
                    size = file.Size,
                    contentType = file.ContentType,
                    filePath = filePath,
                });
            }
        }
        catch(Exception ex) {
            Console.WriteLine(ex.ToString());
        }
    }


    private void HandleDeleteFile(AttachmentModel fileDelete) 
    {
        FileHelper.DeleteFile(fileDelete.filePath);
        AttachmentModel fileToDelete = files.FirstOrDefault(file => file.filePath == fileDelete.filePath);
        if (fileToDelete != null)
        {
            files.Remove(fileToDelete);
        }
        StateHasChanged();
    }


    private void HandleEditPoll()
    {
        isDoneCreatePoll = false;
    }


    private async Task<bool> IsValidPoll()
    {
        if (string.IsNullOrEmpty(poll.title))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Tên khảo sát không được trống!");
            return false;
        }

        int questionCount = poll.questions.Count;
        if( questionCount == 0) 
        {
            await JSRuntime.InvokeVoidAsync("alert", "Vui lòng thêm câu hỏi!");
            return false;
        }
        for (int i = 0; i < questionCount; i++)
        {
            var question = poll.questions[i];
            if (string.IsNullOrEmpty(question.text))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Nội dung câu hỏi không được trống!");
                return false;
            }

            int choiceCount = question.choices.Count;
            if( choiceCount == 0) {
                await JSRuntime.InvokeVoidAsync("alert", "Vui lòng thêm lựa chọn!");
                return false;
            }
            for (int j = 0; j < choiceCount; j++)
            {
                if (string.IsNullOrEmpty(question.choices[j].text))
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Lựa chọn không được trống!");
                    return false;
                }
            }
        }
        return true;
    }


    private void HandleChooseCategory(CategoryModel categorySelected) 
    {
        if(categorySelected == null)
        { 
            currentCategory = categories.FirstOrDefault(c => c.name == "Khác");
            toogleShowCategories.ToggleFalse();
            return;
        }
        currentCategory = categorySelected;
        toogleShowCategories.ToggleFalse();
    }



    public async Task CreateMail() 
    {
        bool isValidMail = await IsValidMail();
        if(!isValidMail) 
        {
            return;
        }
        QuillHTMLContent = await QuillHtml.GetHTML();
        string shortBody = await QuillHtml.GetText();
        MailModel mailToCreate = new MailModel
            {
                from = Layout.User.id,
                category = currentCategory.id,
                isImportant = isStar,
                labels = labelsSelected.Select(l => l.id).ToList(),
                to = membersSelected.Select(l => l.id).ToList(),
                cc = membersCCSelected.Select(l => l.id).ToList(),
                bcc = membersBCCSelected.Select(l => l.id).ToList(),
                subject = subject == String.Empty ? "Không có chủ đề" : subject,
                body = QuillHTMLContent,
                attachments = files,
                signature = currentSignature,
                sentDate = DateTimeHelper.FormatDateTimeUTC(),
                author = Layout.User.id,
                shortBody = shortBody.Length > 150 ? shortBody.Substring(0, 150) : shortBody,
                isDraft = false,
                isDeleted = false,
                isRead = false,
                isReply = false,
                originalMailId = "",
                isTrash = false,
                pollId = "",
                created_at = DateTime.Now.Ticks,
                parentId = String.Empty,    
            };
        if(toggleCreatePoll.IsToggled) 
        {
            bool isCreatedPollSuccess = await PollData.CreatePoll(poll);
            if(isCreatedPollSuccess) 
            {
                mailToCreate.pollId = poll.id;
            };
        }
        await MailData.CreateMail(mailToCreate);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Tạo mail thành công!");  
        navigation.NavigateTo("/mail/inbox", true);
    }


    private async Task<bool> IsValidMail() 
    {
        if(membersSelected.Count == 0) 
        {
            await JSRuntime.InvokeVoidAsync("alert", "Danh sách người nhận không được trống!");   
            return false;
        }
        return true;
    }



    private void CancelCreate() 
    { 
        navigation.NavigateTo("/mail/inbox", true);
    }



    public void OnUpdateMembersSelected(MemberSelectedModel memberModel) 
    { 
        if(memberModel.name == "To")
        { 
            membersSelected = memberModel.members;
            return;
        }
        if(memberModel.name == "CC")
        { 
            membersCCSelected = memberModel.members;
            return;
        }
        if(memberModel.name == "BCC")
        { 
            membersBCCSelected = memberModel.members;
            return;
        }
    }

    public async Task Draft()
    {
        QuillHTMLContent = await QuillHtml.GetHTML();
        string shortBody = await QuillHtml.GetText();
        MailModel mailToDraft = new MailModel
            {
                from = Layout.User.id,
                category = currentCategory.id,
                isImportant = isStar,
                labels = labelsSelected.Select(l => l.id).ToList(),
                to = membersSelected.Select(l => l.id).ToList(),
                cc = membersCCSelected.Select(l => l.id).ToList(),
                bcc = membersBCCSelected.Select(l => l.id).ToList(),
                subject = subject == String.Empty ? "Không có chủ đề" : subject,
                body = QuillHTMLContent,
                attachments = files,
                signature = currentSignature,
                sentDate = DateTimeHelper.FormatDateTimeUTC(),
                author = Layout.User.id,
                shortBody = shortBody.Length > 50 ? shortBody.Substring(0, 50) : shortBody,
                isDraft = true,
                isReply = false,
                originalMailId = "",
                isDeleted = false,
                isRead = false,
                isTrash = false,
                created_at = DateTime.Now.Ticks,
            };
        if(toggleCreatePoll.IsToggled) 
        {
            bool isCreatedPollSuccess = await PollData.CreatePoll(poll);
            if(isCreatedPollSuccess) 
            {
                mailToDraft.pollId = poll.id;
            };
        }
        await MailData.Draft(mailToDraft);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Lưu nháp thành công");
        navigation.NavigateTo("/mail/inbox", true);
    }
}