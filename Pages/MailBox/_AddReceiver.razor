        @if(membersSelected.Count > 0)
        {
        <ul class="is-flex is-align-items-center" style="flex-wrap: wrap; gap: 8px">
            @foreach (var member in membersSelected)
            {
                <li class="is-flex is-align-items-center container-to">
                    <figure class="image is-16x16">
                        <img class="is-rounded" src="@member.avatar">
                    </figure>
                    <span class="is-inline-block  is-secondary-10 is_label2" style="line-height: 16px; margin: 0 4px;">
                        @member.name
                    </span>
                    <span class="icon is-pointer is-small" @onclick="() => DeleteMember(member)">
                        <i class="material-icons-outlined is-secondary-10" style="font-size: 16px;">
                            close
                        </i>
                    </span>
                </li>
            }
        </ul>
        }
        @if(groupsSelected.Count > 0 )
        {
        <ul class="is-flex is-align-items-center" style="flex-wrap: wrap; gap: 8px">
            @foreach (var group in groupsSelected)
            {
                <li class="is-flex is-align-items-center container-to">
                    <span class="is_caption is-secondary-40">Nh√≥m</span>
                    <span style="margin: 0px 8px 0px 4px; max-width: 75px;"
                        class="is-inline-block text-ellipsis is-secondary-10 is_label2">
                        @group.name
                    </span>
                    <span class="icon is-pointer" @onclick="() => DeleteGroup(group)">
                        <i class="material-icons-outlined is-secondary-10">
                            close
                        </i>
                    </span>
                </li>
            }
        </ul>
        }
        <_AddMember 
            SearchMembers="SearchMembers" 
            members="members" 
            directionDropdown="is-left"
            HandleSelectedMember="SelectedMember" 
        />
        <_AddGroupMember 
            groups="groups" 
            directionDropdown="is-left" 
            HandleSelectedGroup="SelectedGroup" 
        />
@code {
    [Parameter]
    public string nameReceiver {get; set;}
    [Parameter]
    public List<MemberModel> membersSelected {get; set;}
    [Parameter]
    public List<GroupModel> groupsSelected {get; set; }
    [Parameter]
    public List<MemberModel> members { get; set; } = new List<MemberModel>();
    [Parameter]
    public List<GroupModel> groups { get; set; } = new List<GroupModel>();
    [Parameter] 
    public List<MemberModel> originalMembers { get; set; } = new List<MemberModel>(); 
    [Parameter] 
    public EventCallback<MemberSelectedModel> OnUpdateMembersSelected { get; set;}

    private void DeleteGroup(GroupModel group) 
    {
        groupsSelected.Remove(group);
        groups.Add(group);
    }


    private void DeleteMember(MemberModel member) 
    {
        membersSelected.Remove(member);
        members.Add(member);        
        OnUpdateMembersSelected.InvokeAsync(
            new MemberSelectedModel {
                name = nameReceiver,
                members = membersSelected
            }
        );
    }

    private void SelectedMember(List<MemberModel> membersList) 
    { 
        List<MemberModel> clonedList = new List<MemberModel>(membersSelected);
        clonedList.AddRange(membersList);
        membersSelected = clonedList.ToList();
        OnUpdateMembersSelected.InvokeAsync(
            new MemberSelectedModel {
                name = nameReceiver,
                members = membersSelected
            }
        );
    }

    private void SearchMembers(string memberName)
    {
        string normalizedInput = memberName.ToLower();
        if (!string.IsNullOrEmpty(normalizedInput))
        {
            members = originalMembers
                .Where(member => member.name.ToLower().Contains(normalizedInput))
                .ToList();
        }
        else
        {
            members = originalMembers.ToList();
        }
    }

    private void SelectedGroup(List<GroupModel> groupsList) 
    { 
        List<GroupModel> clonedList = new List<GroupModel>(groupsSelected);
        clonedList.AddRange(groupsList);
        groupsSelected = clonedList.ToList();
    }
}