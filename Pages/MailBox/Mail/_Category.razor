<ul class="is-flex is-align-items-center category__list is-flex-1">
    <li @onclick='() => HandleChangeTabCategory("all")' class="category__item @(currentTabActive == "all" ? "active": "" )">
        <span>Tất cả</span>
    </li>
    @foreach (var category in categories.Where(c => c.name != "Khác").Take(7))
    {
        <li @onclick="() => HandleChangeTabCategory(category.id)" class="category__item @(currentTabActive == category.id ? "active": "" )">
            <span>@category.name</span>
        </li>
    }
    <li class="category__item is-flex-1">
    </li>
</ul>

@if(categories.Count - 7 > 0)
{
    <div class="dropdown is-hoverable is-right category__border-bottom" style="height: 37px ;">
        <div class="dropdown-trigger is-flex is-align-items-center is-pointer">
            <span class="has-text-weight-medium is-primary-40">Khác
                <span> @($"(+{categories.Count - 8})") </span>
            </span>
            <span class="icon">
                <i class="material-symbols-outlined is-secondary-10">
                    arrow_drop_down
                </i>
            </span>
        </div>
        <div class="dropdown-menu" style="width: 200px">
            <div class="dropdown-content px-2">
                <p class="dropdown-item has-text-weight-medium">Danh sách danh mục</p>
                 @foreach (var category in categories.Where(c => c.name != "Khác").Skip(7))
                {
                    <p class="dropdown-item" @onclick="() => HandleChangeTabCategory(category.id)">@category.name</p>
                }
            </div>
        </div>
    </div>
}


@code {

    [CascadingParameter] public LayoutMain Layout { get; set; }
    [Parameter] public EventCallback<FilterModel> FilterMails {get; set; }

    public List<CategoryModel> categories = new();
    public CategorySortedModel sortedUser { get; set;} = new();
    public string currentTabActive = "all";
    
    protected override async Task OnInitializedAsync()
    {
        // Lấy danh sách danh mục
        categories = await CategoryData.GetList();

        // Lấy danh sách sort của user
        sortedUser = await CategoryData.GetSorted(Layout.User.id);

        // Nếu có thì sort theo thứ tự của user
        if(!string.IsNullOrEmpty(sortedUser.id))
        {
            categories = categories.OrderBy(x => sortedUser.sorted.FindIndex(p => p == x.position)).ToList();
        }
        StateHasChanged();
    }


    // Hàm xử lý active tab của danh mục
    private void HandleChangeTabCategory(string id)
    {
        currentTabActive = id;

        // Callback dùng để lọc theo danh mục ( truyền id của danh mục )
        FilterMails.InvokeAsync(
            new FilterModel {
                categoryId = id
            }
        );
    }
}