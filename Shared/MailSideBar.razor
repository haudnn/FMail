@inject IJSRuntime JSRuntime
@inject ProtectedLocalStorage storage
@inject NavigationManager navigation
<nav class="mail__sidebar @(navLess ? " is_less" : "" )">
    <div class="is-flex is-align-items-center is-pointer" @onclick="ToggleSidebar" style="width: 42px; height: 36px;">
        <span class="icon is-small">
            <i class="material-icons-outlined">menu</i>
        </span>
    </div>

    <div class="mail__sidebar-menu scrolly">
        <div class="mail__sidebar-add" style="margin-right: 10px;">
            <a href="create" class="is-flex is-align-items-center is-justify-content-center is-full">
                <span class="icon">
                    <i class="material-icons-outlined has-text-white">add</i>
                </span>
                <span class="has-text-weight-medium has-text-white">Tạo thư mới</span>
            </a>
        </div>
        @foreach (var item in NavMap.Values)
        {
            <div  style="margin-right: 10px;" class="mail__sidebar-item is-flex is-align-items-center @(item.active ? "active" : "")">
                <a href="@item.link" @onclick="(e) => SetActiveNavItem(item)">
                    <span class="icon">
                        <i class="material-icons-sharp is-secondary-40">@item.icon</i>
                    </span>
                    <span class="is_sub2 is-secondary-40 mail__sidebar-item-text">@item.name</span>
                </a> 
            </div>
        }
        <div  style="margin-right: 10px;" class="mail__sidebar-item border is-flex is-align-items-center is-gap-10-y">
            <span class="icon">
                <i class="material-icons-outlined">arrow_drop_down</i>
            </span>
            <span class="is_sub2 is-secondary-40">Nhãn</span>
        </div>
        <div class="labels-list">
            @foreach (var label in labels)
            {
                <div class="label-item @(label.id == activeLabel ? "label-active" : "")" @onclick="() => HandleActiveLabel(label)">
                    <a href="mail/label/@label.id" class="is-flex is-gap-10-y" >
                        <span class="icon">
                            <i class="material-icons-sharp" style="color: @label.color">label</i>
                        </span>
                        <span class="text-ellipsis is_sub2 @(label.id == activeLabel ? "is-primary-40" : "is-secondary-40") ">@label.name</span>
                    </a>
                </div>
            }

        </div>
    </div>

    <div class="nav-settings">
        <a href="settings" class="is-flex is-align-items-center is-gap-10-y" style="width: 100%;">
           <span class="icon is_sub2 is-secondary-40">
                <i class="material-icons-sharp">settings</i>
            </span>
            <span class="is_sub2 is-secondary-40">Thiết lập</span>
        </a>
    </div>

</nav>

@code{
    [CascadingParameter]
    public LayoutMail Layout { get; set; }
    [Parameter]
    public EventCallback<int> HandleActiveTab { get; set; }
    [Parameter]
    public EventCallback<bool> HandleToggleSidebarMail { get; set; }
    private Dictionary<int, NavModel> NavMap = new Dictionary<int, NavModel>();
    private int currentIndexNavActive;
    private bool navLess = false;
    private List<LabelModel> labels = new();
    private async Task ToggleSidebar()
    {
        navLess = !navLess;
        await HandleToggleSidebarMail.InvokeAsync(navLess);
    }
    private NavModel _prevActiveNavItem;
    private int labelActive;
    protected override async Task OnInitializedAsync()
    {
        LabelData labelData = new LabelData();
        labels = await labelData.GetAllLabels();
        Navigation();
    }
    private async Task SetActiveNavItem(NavModel navItem)
    {
        var relativePath = navigation.ToBaseRelativePath(navigation.Uri);
        if (_prevActiveNavItem != null)
        {
            _prevActiveNavItem.active = false;
        }
        navItem.active = true;
        _prevActiveNavItem = navItem;
        await InvokeAsync(StateHasChanged);
    }
    private void Navigation() 
    {
        NavMap.Add(1, new NavModel
            {
                id = 1,
                name = "Thư đã nhận",
                icon = "inbox",
                link = "mail/inbox",
                active = false,
            });
        NavMap.Add(2, new NavModel
            {
                id = 2,
                name = "Thư đã gửi",
                icon = "send",
                link = "mail/sent",
                active = false,
            });
        NavMap.Add(3, new NavModel
            {
                id = 3,
                name = "Thư quan trọng",
                icon = "star",
                link = "mail/important",
                active = false,
            });
        NavMap.Add(4, new NavModel
            {
                id = 4,
                name = "Thư nháp",
                icon = "drafts",
                link = "mail/drafts",
                active = false,
            });
        NavMap.Add(5,new NavModel
            {
                id = 5,
                name = "Thùng rác ",
                icon = "delete",
                link = "mail/trash",
                active = false,
            });
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var relativePath = navigation.ToBaseRelativePath(navigation.Uri);
            if(relativePath == "mail/label/") {
                _prevActiveNavItem = null;
            }
            else{ 
                foreach (var item in NavMap.Values)
                {
                    if(item.link == relativePath) { 
                        item.active = true;
                        _prevActiveNavItem = item;
                        return;
                    }
                }
            }

            StateHasChanged();
        }
    }
    public string activeLabel { get; set; }

    private void HandleActiveLabel(LabelModel clickedLabel) { 
        activeLabel = clickedLabel.id;
    }
}


